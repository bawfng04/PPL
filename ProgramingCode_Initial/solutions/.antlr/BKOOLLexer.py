# Generated from d:/Projects/PPL-Assignment/ProgramingCode_Initial/solutions/MiniPHP.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,23,142,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
        15,1,15,5,15,87,8,15,10,15,12,15,90,9,15,1,16,4,16,93,8,16,11,16,
        12,16,94,1,17,4,17,98,8,17,11,17,12,17,99,1,17,1,17,5,17,104,8,17,
        10,17,12,17,107,9,17,1,17,1,17,4,17,111,8,17,11,17,12,17,112,3,17,
        115,8,17,1,18,1,18,1,18,1,18,5,18,121,8,18,10,18,12,18,124,9,18,
        1,18,1,18,1,18,1,19,4,19,130,8,19,11,19,12,19,131,1,19,1,19,1,20,
        1,20,1,20,1,21,1,21,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,1,0,5,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,1,0,39,39,3,0,9,10,13,13,32,32,150,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,53,1,0,0,0,5,56,
        1,0,0,0,7,58,1,0,0,0,9,60,1,0,0,0,11,62,1,0,0,0,13,64,1,0,0,0,15,
        66,1,0,0,0,17,68,1,0,0,0,19,71,1,0,0,0,21,73,1,0,0,0,23,75,1,0,0,
        0,25,77,1,0,0,0,27,79,1,0,0,0,29,81,1,0,0,0,31,84,1,0,0,0,33,92,
        1,0,0,0,35,114,1,0,0,0,37,116,1,0,0,0,39,129,1,0,0,0,41,135,1,0,
        0,0,43,138,1,0,0,0,45,140,1,0,0,0,47,48,5,97,0,0,48,49,5,114,0,0,
        49,50,5,114,0,0,50,51,5,97,0,0,51,52,5,121,0,0,52,2,1,0,0,0,53,54,
        5,42,0,0,54,55,5,42,0,0,55,4,1,0,0,0,56,57,5,46,0,0,57,6,1,0,0,0,
        58,59,5,42,0,0,59,8,1,0,0,0,60,61,5,47,0,0,61,10,1,0,0,0,62,63,5,
        37,0,0,63,12,1,0,0,0,64,65,5,43,0,0,65,14,1,0,0,0,66,67,5,45,0,0,
        67,16,1,0,0,0,68,69,5,63,0,0,69,70,5,63,0,0,70,18,1,0,0,0,71,72,
        5,40,0,0,72,20,1,0,0,0,73,74,5,41,0,0,74,22,1,0,0,0,75,76,5,61,0,
        0,76,24,1,0,0,0,77,78,5,59,0,0,78,26,1,0,0,0,79,80,5,44,0,0,80,28,
        1,0,0,0,81,82,5,61,0,0,82,83,5,62,0,0,83,30,1,0,0,0,84,88,7,0,0,
        0,85,87,7,1,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,
        1,0,0,0,89,32,1,0,0,0,90,88,1,0,0,0,91,93,7,2,0,0,92,91,1,0,0,0,
        93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,34,1,0,0,0,96,98,7,
        2,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,
        101,1,0,0,0,101,105,5,46,0,0,102,104,7,2,0,0,103,102,1,0,0,0,104,
        107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,115,1,0,0,0,107,
        105,1,0,0,0,108,110,5,46,0,0,109,111,7,2,0,0,110,109,1,0,0,0,111,
        112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,
        97,1,0,0,0,114,108,1,0,0,0,115,36,1,0,0,0,116,122,5,39,0,0,117,121,
        8,3,0,0,118,119,5,39,0,0,119,121,5,39,0,0,120,117,1,0,0,0,120,118,
        1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,
        1,0,0,0,124,122,1,0,0,0,125,126,5,39,0,0,126,127,6,18,0,0,127,38,
        1,0,0,0,128,130,7,4,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,
        1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,6,19,1,0,134,40,
        1,0,0,0,135,136,9,0,0,0,136,137,6,20,2,0,137,42,1,0,0,0,138,139,
        9,0,0,0,139,44,1,0,0,0,140,141,9,0,0,0,141,46,1,0,0,0,10,0,88,94,
        99,105,112,114,120,122,131,3,1,18,0,6,0,0,1,20,1
    ]

class BKOOLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ARRAY = 1
    DSTAR = 2
    DOT = 3
    MUL = 4
    DIV = 5
    MOD = 6
    ADD = 7
    SUB = 8
    DQUES = 9
    LP = 10
    RP = 11
    EQ = 12
    SEMI = 13
    COMMA = 14
    ARROW = 15
    VARNAME = 16
    INTLIT = 17
    FLOATLIT = 18
    STRINGLIT = 19
    WS = 20
    ERROR_CHAR = 21
    UNCLOSE_STRING = 22
    ILLEGAL_ESCAPE = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'array'", "'**'", "'.'", "'*'", "'/'", "'%'", "'+'", "'-'", 
            "'??'", "'('", "')'", "'='", "';'", "','", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "ARRAY", "DSTAR", "DOT", "MUL", "DIV", "MOD", "ADD", "SUB", 
            "DQUES", "LP", "RP", "EQ", "SEMI", "COMMA", "ARROW", "VARNAME", 
            "INTLIT", "FLOATLIT", "STRINGLIT", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "ARRAY", "DSTAR", "DOT", "MUL", "DIV", "MOD", "ADD", "SUB", 
                  "DQUES", "LP", "RP", "EQ", "SEMI", "COMMA", "ARROW", "VARNAME", 
                  "INTLIT", "FLOATLIT", "STRINGLIT", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniPHP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[18] = self.STRINGLIT_action 
            actions[20] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     



# Generated from d:/Projects/PPL-Assignment/BTL/BTL_1_final_task2/main/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,63,824,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,3,1,152,8,1,1,2,1,2,1,2,1,2,1,2,3,2,159,8,
        2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,167,8,3,1,3,5,3,170,8,3,10,3,12,3,
        173,9,3,1,4,1,4,1,4,1,4,1,4,3,4,180,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,190,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,201,
        8,7,1,8,1,8,1,8,1,8,3,8,207,8,8,1,8,1,8,1,8,5,8,212,8,8,10,8,12,
        8,215,9,8,1,8,1,8,1,8,3,8,220,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,228,
        8,8,10,8,12,8,231,9,8,1,8,1,8,3,8,235,8,8,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,3,10,246,8,10,1,11,1,11,1,11,1,11,1,12,3,12,253,
        8,12,1,12,1,12,3,12,257,8,12,1,12,1,12,1,12,5,12,262,8,12,10,12,
        12,12,265,9,12,1,12,3,12,268,8,12,1,12,1,12,1,13,1,13,1,13,1,13,
        3,13,276,8,13,1,13,1,13,1,13,1,13,1,13,5,13,283,8,13,10,13,12,13,
        286,9,13,1,13,1,13,1,13,3,13,291,8,13,1,13,3,13,294,8,13,1,13,1,
        13,3,13,298,8,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,3,15,310,8,15,1,15,1,15,3,15,314,8,15,1,15,3,15,317,8,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,327,8,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,5,18,337,8,18,10,18,12,18,340,9,18,1,18,
        1,18,1,18,1,18,5,18,346,8,18,10,18,12,18,349,9,18,3,18,351,8,18,
        1,19,1,19,1,19,1,19,1,19,1,19,5,19,359,8,19,10,19,12,19,362,9,19,
        3,19,364,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,5,20,373,8,20,10,
        20,12,20,376,9,20,1,20,1,20,5,20,380,8,20,10,20,12,20,383,9,20,1,
        20,1,20,1,20,1,21,1,21,5,21,390,8,21,10,21,12,21,393,9,21,4,21,395,
        8,21,11,21,12,21,396,1,22,1,22,1,22,1,22,1,22,1,22,3,22,405,8,22,
        1,23,1,23,1,23,1,23,3,23,411,8,23,1,24,1,24,3,24,415,8,24,1,24,3,
        24,418,8,24,1,25,1,25,1,25,1,25,3,25,424,8,25,1,26,1,26,1,26,1,26,
        1,26,5,26,431,8,26,10,26,12,26,434,9,26,1,26,1,26,5,26,438,8,26,
        10,26,12,26,441,9,26,1,26,1,26,1,26,1,27,4,27,447,8,27,11,27,12,
        27,448,1,28,1,28,1,28,1,28,3,28,455,8,28,1,29,1,29,1,29,3,29,460,
        8,29,1,29,1,29,3,29,464,8,29,1,29,1,29,1,29,1,29,3,29,470,8,29,1,
        29,1,29,3,29,474,8,29,1,29,3,29,477,8,29,1,30,1,30,3,30,481,8,30,
        1,31,1,31,3,31,485,8,31,1,32,1,32,3,32,489,8,32,1,33,1,33,3,33,493,
        8,33,1,34,1,34,1,34,1,34,3,34,499,8,34,1,35,1,35,1,36,1,36,1,36,
        5,36,506,8,36,10,36,12,36,509,9,36,1,37,1,37,1,37,1,37,1,37,3,37,
        516,8,37,1,37,1,37,3,37,520,8,37,1,37,1,37,1,37,1,37,3,37,526,8,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,547,8,38,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,560,8,39,1,39,1,39,3,
        39,564,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,
        43,1,43,3,43,578,8,43,1,43,1,43,3,43,582,8,43,1,43,3,43,585,8,43,
        1,44,1,44,3,44,589,8,44,1,44,1,44,3,44,593,8,44,1,44,1,44,3,44,597,
        8,44,1,45,3,45,600,8,45,1,45,1,45,3,45,604,8,45,1,45,1,45,5,45,608,
        8,45,10,45,12,45,611,9,45,1,45,3,45,614,8,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,3,46,623,8,46,1,47,1,47,1,47,1,47,1,47,1,47,5,47,
        631,8,47,10,47,12,47,634,9,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,
        642,8,48,10,48,12,48,645,9,48,1,49,1,49,1,49,1,49,1,49,1,49,5,49,
        653,8,49,10,49,12,49,656,9,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,
        664,8,50,10,50,12,50,667,9,50,1,51,1,51,1,51,1,51,1,51,1,51,5,51,
        675,8,51,10,51,12,51,678,9,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,
        686,8,52,10,52,12,52,689,9,52,1,53,1,53,1,53,1,53,1,53,3,53,696,
        8,53,1,54,1,54,1,54,1,54,5,54,702,8,54,10,54,12,54,705,9,54,1,55,
        1,55,1,55,1,55,1,55,1,55,3,55,713,8,55,1,56,1,56,1,56,1,56,1,57,
        1,57,1,57,1,58,1,58,3,58,724,8,58,1,58,1,58,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,3,59,737,8,59,1,60,1,60,1,60,1,60,1,60,
        1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        3,62,757,8,62,1,63,1,63,1,63,5,63,762,8,63,10,63,12,63,765,9,63,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,776,8,64,1,65,
        1,65,1,65,1,65,1,65,1,65,5,65,784,8,65,10,65,12,65,787,9,65,1,65,
        1,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,797,8,66,1,67,1,67,1,67,
        3,67,802,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,811,8,68,1,
        69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,3,70,822,8,70,1,70,0,
        6,94,96,98,100,102,104,71,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,0,8,2,0,
        52,52,57,57,2,0,7,8,53,53,2,0,35,40,43,43,2,0,44,44,53,53,1,0,26,
        27,1,0,28,31,1,0,21,22,1,0,23,25,885,0,142,1,0,0,0,2,151,1,0,0,0,
        4,158,1,0,0,0,6,166,1,0,0,0,8,179,1,0,0,0,10,189,1,0,0,0,12,191,
        1,0,0,0,14,200,1,0,0,0,16,234,1,0,0,0,18,236,1,0,0,0,20,245,1,0,
        0,0,22,247,1,0,0,0,24,252,1,0,0,0,26,271,1,0,0,0,28,299,1,0,0,0,
        30,302,1,0,0,0,32,326,1,0,0,0,34,328,1,0,0,0,36,350,1,0,0,0,38,363,
        1,0,0,0,40,367,1,0,0,0,42,394,1,0,0,0,44,404,1,0,0,0,46,410,1,0,
        0,0,48,417,1,0,0,0,50,423,1,0,0,0,52,425,1,0,0,0,54,446,1,0,0,0,
        56,454,1,0,0,0,58,476,1,0,0,0,60,480,1,0,0,0,62,484,1,0,0,0,64,488,
        1,0,0,0,66,492,1,0,0,0,68,494,1,0,0,0,70,500,1,0,0,0,72,502,1,0,
        0,0,74,510,1,0,0,0,76,527,1,0,0,0,78,563,1,0,0,0,80,565,1,0,0,0,
        82,569,1,0,0,0,84,572,1,0,0,0,86,575,1,0,0,0,88,588,1,0,0,0,90,599,
        1,0,0,0,92,622,1,0,0,0,94,624,1,0,0,0,96,635,1,0,0,0,98,646,1,0,
        0,0,100,657,1,0,0,0,102,668,1,0,0,0,104,679,1,0,0,0,106,695,1,0,
        0,0,108,697,1,0,0,0,110,712,1,0,0,0,112,714,1,0,0,0,114,718,1,0,
        0,0,116,721,1,0,0,0,118,736,1,0,0,0,120,738,1,0,0,0,122,743,1,0,
        0,0,124,756,1,0,0,0,126,758,1,0,0,0,128,775,1,0,0,0,130,777,1,0,
        0,0,132,796,1,0,0,0,134,798,1,0,0,0,136,810,1,0,0,0,138,812,1,0,
        0,0,140,821,1,0,0,0,142,143,3,2,1,0,143,144,3,6,3,0,144,145,3,4,
        2,0,145,146,3,2,1,0,146,147,5,0,0,1,147,1,1,0,0,0,148,152,1,0,0,
        0,149,150,5,57,0,0,150,152,3,2,1,0,151,148,1,0,0,0,151,149,1,0,0,
        0,152,3,1,0,0,0,153,159,1,0,0,0,154,155,3,2,1,0,155,156,3,6,3,0,
        156,157,3,4,2,0,157,159,1,0,0,0,158,153,1,0,0,0,158,154,1,0,0,0,
        159,5,1,0,0,0,160,167,3,12,6,0,161,167,3,18,9,0,162,167,3,26,13,
        0,163,167,3,30,15,0,164,167,3,40,20,0,165,167,3,52,26,0,166,160,
        1,0,0,0,166,161,1,0,0,0,166,162,1,0,0,0,166,163,1,0,0,0,166,164,
        1,0,0,0,166,165,1,0,0,0,167,171,1,0,0,0,168,170,5,57,0,0,169,168,
        1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,7,1,
        0,0,0,173,171,1,0,0,0,174,180,3,10,5,0,175,176,3,10,5,0,176,177,
        3,2,1,0,177,178,3,8,4,0,178,180,1,0,0,0,179,174,1,0,0,0,179,175,
        1,0,0,0,180,9,1,0,0,0,181,190,3,66,33,0,182,190,3,68,34,0,183,190,
        3,74,37,0,184,190,3,76,38,0,185,190,3,82,41,0,186,190,3,84,42,0,
        187,190,3,88,44,0,188,190,3,86,43,0,189,181,1,0,0,0,189,182,1,0,
        0,0,189,183,1,0,0,0,189,184,1,0,0,0,189,185,1,0,0,0,189,186,1,0,
        0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,11,1,0,0,0,191,192,5,14,
        0,0,192,193,3,14,7,0,193,194,7,0,0,0,194,13,1,0,0,0,195,201,3,16,
        8,0,196,197,3,16,8,0,197,198,5,51,0,0,198,199,3,14,7,0,199,201,1,
        0,0,0,200,195,1,0,0,0,200,196,1,0,0,0,201,15,1,0,0,0,202,203,5,53,
        0,0,203,206,3,132,66,0,204,205,5,35,0,0,205,207,3,94,47,0,206,204,
        1,0,0,0,206,207,1,0,0,0,207,235,1,0,0,0,208,213,5,53,0,0,209,210,
        5,51,0,0,210,212,5,53,0,0,211,209,1,0,0,0,212,215,1,0,0,0,213,211,
        1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,219,
        3,132,66,0,217,218,5,35,0,0,218,220,3,92,46,0,219,217,1,0,0,0,219,
        220,1,0,0,0,220,235,1,0,0,0,221,222,5,53,0,0,222,223,5,35,0,0,223,
        235,3,94,47,0,224,229,5,53,0,0,225,226,5,51,0,0,226,228,5,53,0,0,
        227,225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,
        230,232,1,0,0,0,231,229,1,0,0,0,232,233,5,35,0,0,233,235,3,92,46,
        0,234,202,1,0,0,0,234,208,1,0,0,0,234,221,1,0,0,0,234,224,1,0,0,
        0,235,17,1,0,0,0,236,237,5,13,0,0,237,238,3,20,10,0,238,239,7,0,
        0,0,239,19,1,0,0,0,240,246,3,22,11,0,241,242,3,22,11,0,242,243,5,
        51,0,0,243,244,3,20,10,0,244,246,1,0,0,0,245,240,1,0,0,0,245,241,
        1,0,0,0,246,21,1,0,0,0,247,248,5,53,0,0,248,249,5,35,0,0,249,250,
        3,94,47,0,250,23,1,0,0,0,251,253,5,57,0,0,252,251,1,0,0,0,252,253,
        1,0,0,0,253,254,1,0,0,0,254,256,5,47,0,0,255,257,5,57,0,0,256,255,
        1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,263,3,10,5,0,259,262,
        3,10,5,0,260,262,5,57,0,0,261,259,1,0,0,0,261,260,1,0,0,0,262,265,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,267,1,0,0,0,265,263,
        1,0,0,0,266,268,5,57,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,269,
        1,0,0,0,269,270,5,48,0,0,270,25,1,0,0,0,271,272,5,5,0,0,272,273,
        5,53,0,0,273,275,5,45,0,0,274,276,3,36,18,0,275,274,1,0,0,0,275,
        276,1,0,0,0,276,277,1,0,0,0,277,290,5,46,0,0,278,279,5,45,0,0,279,
        284,3,132,66,0,280,281,5,51,0,0,281,283,3,132,66,0,282,280,1,0,0,
        0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,
        0,286,284,1,0,0,0,287,288,5,46,0,0,288,291,1,0,0,0,289,291,3,132,
        66,0,290,278,1,0,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,
        0,0,292,294,5,57,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,
        0,0,295,297,3,24,12,0,296,298,5,52,0,0,297,296,1,0,0,0,297,298,1,
        0,0,0,298,27,1,0,0,0,299,300,5,53,0,0,300,301,7,1,0,0,301,29,1,0,
        0,0,302,303,5,5,0,0,303,304,5,45,0,0,304,305,3,28,14,0,305,306,5,
        46,0,0,306,307,5,53,0,0,307,309,5,45,0,0,308,310,3,36,18,0,309,308,
        1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,313,5,46,0,0,312,314,
        3,132,66,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,
        5,57,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,
        3,90,45,0,319,320,7,0,0,0,320,31,1,0,0,0,321,327,3,34,17,0,322,323,
        3,34,17,0,323,324,5,51,0,0,324,325,3,32,16,0,325,327,1,0,0,0,326,
        321,1,0,0,0,326,322,1,0,0,0,327,33,1,0,0,0,328,329,5,53,0,0,329,
        330,3,132,66,0,330,35,1,0,0,0,331,332,5,53,0,0,332,351,3,132,66,
        0,333,338,5,53,0,0,334,335,5,51,0,0,335,337,5,53,0,0,336,334,1,0,
        0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,
        0,0,340,338,1,0,0,0,341,351,3,132,66,0,342,347,3,38,19,0,343,344,
        5,51,0,0,344,346,3,38,19,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,
        1,0,0,0,347,348,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,350,331,
        1,0,0,0,350,333,1,0,0,0,350,342,1,0,0,0,351,37,1,0,0,0,352,364,5,
        53,0,0,353,354,5,53,0,0,354,355,5,51,0,0,355,360,5,53,0,0,356,357,
        5,51,0,0,357,359,5,53,0,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,
        1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,363,352,
        1,0,0,0,363,353,1,0,0,0,364,365,1,0,0,0,365,366,3,132,66,0,366,39,
        1,0,0,0,367,368,5,6,0,0,368,369,5,53,0,0,369,370,5,7,0,0,370,374,
        5,47,0,0,371,373,5,57,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,
        1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,381,
        3,42,21,0,378,380,5,57,0,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,385,
        5,48,0,0,385,386,7,0,0,0,386,41,1,0,0,0,387,391,3,44,22,0,388,390,
        5,57,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
        1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,394,387,1,0,0,0,395,396,
        1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,43,1,0,0,0,398,399,5,
        53,0,0,399,400,3,46,23,0,400,401,3,132,66,0,401,402,3,48,24,0,402,
        405,1,0,0,0,403,405,3,30,15,0,404,398,1,0,0,0,404,403,1,0,0,0,405,
        45,1,0,0,0,406,411,1,0,0,0,407,408,5,51,0,0,408,409,5,53,0,0,409,
        411,3,46,23,0,410,406,1,0,0,0,410,407,1,0,0,0,411,47,1,0,0,0,412,
        418,5,52,0,0,413,415,5,52,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,
        416,1,0,0,0,416,418,5,57,0,0,417,412,1,0,0,0,417,414,1,0,0,0,418,
        49,1,0,0,0,419,424,1,0,0,0,420,421,3,44,22,0,421,422,3,50,25,0,422,
        424,1,0,0,0,423,419,1,0,0,0,423,420,1,0,0,0,424,51,1,0,0,0,425,426,
        5,6,0,0,426,427,5,53,0,0,427,428,5,8,0,0,428,432,5,47,0,0,429,431,
        5,57,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,
        1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,439,3,54,27,0,436,438,
        5,57,0,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,
        1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,443,5,48,0,0,443,444,
        7,0,0,0,444,53,1,0,0,0,445,447,3,58,29,0,446,445,1,0,0,0,447,448,
        1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,55,1,0,0,0,450,455,1,
        0,0,0,451,452,3,58,29,0,452,453,3,56,28,0,453,455,1,0,0,0,454,450,
        1,0,0,0,454,451,1,0,0,0,455,57,1,0,0,0,456,457,5,53,0,0,457,459,
        5,45,0,0,458,460,3,36,18,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,
        1,0,0,0,461,463,5,46,0,0,462,464,3,132,66,0,463,462,1,0,0,0,463,
        464,1,0,0,0,464,465,1,0,0,0,465,477,7,0,0,0,466,467,5,53,0,0,467,
        469,5,45,0,0,468,470,3,36,18,0,469,468,1,0,0,0,469,470,1,0,0,0,470,
        471,1,0,0,0,471,473,5,46,0,0,472,474,3,132,66,0,473,472,1,0,0,0,
        473,474,1,0,0,0,474,475,1,0,0,0,475,477,7,0,0,0,476,456,1,0,0,0,
        476,466,1,0,0,0,477,59,1,0,0,0,478,481,1,0,0,0,479,481,3,36,18,0,
        480,478,1,0,0,0,480,479,1,0,0,0,481,61,1,0,0,0,482,485,1,0,0,0,483,
        485,3,132,66,0,484,482,1,0,0,0,484,483,1,0,0,0,485,63,1,0,0,0,486,
        489,1,0,0,0,487,489,5,52,0,0,488,486,1,0,0,0,488,487,1,0,0,0,489,
        65,1,0,0,0,490,493,3,12,6,0,491,493,3,18,9,0,492,490,1,0,0,0,492,
        491,1,0,0,0,493,67,1,0,0,0,494,495,3,72,36,0,495,496,3,70,35,0,496,
        498,3,94,47,0,497,499,5,52,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,
        69,1,0,0,0,500,501,7,2,0,0,501,71,1,0,0,0,502,507,5,53,0,0,503,506,
        3,114,57,0,504,506,3,112,56,0,505,503,1,0,0,0,505,504,1,0,0,0,506,
        509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,73,1,0,0,0,509,507,
        1,0,0,0,510,511,5,1,0,0,511,512,5,45,0,0,512,513,3,94,47,0,513,515,
        5,46,0,0,514,516,5,57,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,
        1,0,0,0,517,519,3,90,45,0,518,520,5,57,0,0,519,518,1,0,0,0,519,520,
        1,0,0,0,520,525,1,0,0,0,521,522,5,2,0,0,522,526,3,74,37,0,523,524,
        5,2,0,0,524,526,3,90,45,0,525,521,1,0,0,0,525,523,1,0,0,0,525,526,
        1,0,0,0,526,75,1,0,0,0,527,546,5,3,0,0,528,529,7,3,0,0,529,530,5,
        51,0,0,530,531,7,3,0,0,531,532,5,43,0,0,532,533,5,17,0,0,533,534,
        3,94,47,0,534,535,3,90,45,0,535,547,1,0,0,0,536,537,3,78,39,0,537,
        538,5,52,0,0,538,539,3,94,47,0,539,540,5,52,0,0,540,541,3,80,40,
        0,541,542,3,90,45,0,542,547,1,0,0,0,543,544,3,94,47,0,544,545,3,
        90,45,0,545,547,1,0,0,0,546,528,1,0,0,0,546,536,1,0,0,0,546,543,
        1,0,0,0,547,77,1,0,0,0,548,549,3,72,36,0,549,550,5,43,0,0,550,551,
        3,94,47,0,551,564,1,0,0,0,552,553,3,72,36,0,553,554,3,70,35,0,554,
        555,3,94,47,0,555,564,1,0,0,0,556,557,5,14,0,0,557,559,5,53,0,0,
        558,560,3,132,66,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,
        0,561,562,5,35,0,0,562,564,3,94,47,0,563,548,1,0,0,0,563,552,1,0,
        0,0,563,556,1,0,0,0,564,79,1,0,0,0,565,566,3,72,36,0,566,567,3,70,
        35,0,567,568,3,94,47,0,568,81,1,0,0,0,569,570,5,16,0,0,570,571,7,
        0,0,0,571,83,1,0,0,0,572,573,5,15,0,0,573,574,7,0,0,0,574,85,1,0,
        0,0,575,584,5,4,0,0,576,578,3,94,47,0,577,576,1,0,0,0,577,578,1,
        0,0,0,578,579,1,0,0,0,579,585,5,52,0,0,580,582,3,94,47,0,581,580,
        1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,585,5,57,0,0,584,577,
        1,0,0,0,584,581,1,0,0,0,585,87,1,0,0,0,586,589,5,53,0,0,587,589,
        3,72,36,0,588,586,1,0,0,0,588,587,1,0,0,0,589,590,1,0,0,0,590,592,
        5,45,0,0,591,593,3,140,70,0,592,591,1,0,0,0,592,593,1,0,0,0,593,
        594,1,0,0,0,594,596,5,46,0,0,595,597,5,52,0,0,596,595,1,0,0,0,596,
        597,1,0,0,0,597,89,1,0,0,0,598,600,5,57,0,0,599,598,1,0,0,0,599,
        600,1,0,0,0,600,601,1,0,0,0,601,603,5,47,0,0,602,604,5,57,0,0,603,
        602,1,0,0,0,603,604,1,0,0,0,604,609,1,0,0,0,605,608,3,10,5,0,606,
        608,5,57,0,0,607,605,1,0,0,0,607,606,1,0,0,0,608,611,1,0,0,0,609,
        607,1,0,0,0,609,610,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,612,
        614,5,57,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,
        616,5,48,0,0,616,91,1,0,0,0,617,623,3,94,47,0,618,619,3,94,47,0,
        619,620,5,51,0,0,620,621,3,92,46,0,621,623,1,0,0,0,622,617,1,0,0,
        0,622,618,1,0,0,0,623,93,1,0,0,0,624,625,6,47,-1,0,625,626,3,96,
        48,0,626,632,1,0,0,0,627,628,10,2,0,0,628,629,5,33,0,0,629,631,3,
        96,48,0,630,627,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,
        1,0,0,0,633,95,1,0,0,0,634,632,1,0,0,0,635,636,6,48,-1,0,636,637,
        3,98,49,0,637,643,1,0,0,0,638,639,10,2,0,0,639,640,5,32,0,0,640,
        642,3,98,49,0,641,638,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,
        644,1,0,0,0,644,97,1,0,0,0,645,643,1,0,0,0,646,647,6,49,-1,0,647,
        648,3,100,50,0,648,654,1,0,0,0,649,650,10,2,0,0,650,651,7,4,0,0,
        651,653,3,100,50,0,652,649,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,
        0,654,655,1,0,0,0,655,99,1,0,0,0,656,654,1,0,0,0,657,658,6,50,-1,
        0,658,659,3,102,51,0,659,665,1,0,0,0,660,661,10,2,0,0,661,662,7,
        5,0,0,662,664,3,102,51,0,663,660,1,0,0,0,664,667,1,0,0,0,665,663,
        1,0,0,0,665,666,1,0,0,0,666,101,1,0,0,0,667,665,1,0,0,0,668,669,
        6,51,-1,0,669,670,3,104,52,0,670,676,1,0,0,0,671,672,10,2,0,0,672,
        673,7,6,0,0,673,675,3,104,52,0,674,671,1,0,0,0,675,678,1,0,0,0,676,
        674,1,0,0,0,676,677,1,0,0,0,677,103,1,0,0,0,678,676,1,0,0,0,679,
        680,6,52,-1,0,680,681,3,106,53,0,681,687,1,0,0,0,682,683,10,2,0,
        0,683,684,7,7,0,0,684,686,3,106,53,0,685,682,1,0,0,0,686,689,1,0,
        0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,105,1,0,0,0,689,687,1,0,
        0,0,690,691,5,34,0,0,691,696,3,106,53,0,692,693,5,22,0,0,693,696,
        3,106,53,0,694,696,3,108,54,0,695,690,1,0,0,0,695,692,1,0,0,0,695,
        694,1,0,0,0,696,107,1,0,0,0,697,703,3,110,55,0,698,702,3,112,56,
        0,699,702,3,114,57,0,700,702,3,116,58,0,701,698,1,0,0,0,701,699,
        1,0,0,0,701,700,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,
        1,0,0,0,704,109,1,0,0,0,705,703,1,0,0,0,706,713,3,118,59,0,707,713,
        5,53,0,0,708,709,5,45,0,0,709,710,3,94,47,0,710,711,5,46,0,0,711,
        713,1,0,0,0,712,706,1,0,0,0,712,707,1,0,0,0,712,708,1,0,0,0,713,
        111,1,0,0,0,714,715,5,49,0,0,715,716,3,94,47,0,716,717,5,50,0,0,
        717,113,1,0,0,0,718,719,5,41,0,0,719,720,5,53,0,0,720,115,1,0,0,
        0,721,723,5,45,0,0,722,724,3,140,70,0,723,722,1,0,0,0,723,724,1,
        0,0,0,724,725,1,0,0,0,725,726,5,46,0,0,726,117,1,0,0,0,727,737,5,
        54,0,0,728,737,5,55,0,0,729,737,5,56,0,0,730,737,5,19,0,0,731,737,
        5,20,0,0,732,737,5,18,0,0,733,737,3,120,60,0,734,737,3,122,61,0,
        735,737,3,134,67,0,736,727,1,0,0,0,736,728,1,0,0,0,736,729,1,0,0,
        0,736,730,1,0,0,0,736,731,1,0,0,0,736,732,1,0,0,0,736,733,1,0,0,
        0,736,734,1,0,0,0,736,735,1,0,0,0,737,119,1,0,0,0,738,739,3,130,
        65,0,739,740,5,47,0,0,740,741,3,126,63,0,741,742,5,48,0,0,742,121,
        1,0,0,0,743,744,5,47,0,0,744,745,3,126,63,0,745,746,5,48,0,0,746,
        123,1,0,0,0,747,748,3,130,65,0,748,749,5,47,0,0,749,750,3,126,63,
        0,750,751,5,48,0,0,751,757,1,0,0,0,752,753,5,47,0,0,753,754,3,126,
        63,0,754,755,5,48,0,0,755,757,1,0,0,0,756,747,1,0,0,0,756,752,1,
        0,0,0,757,125,1,0,0,0,758,763,3,128,64,0,759,760,5,51,0,0,760,762,
        3,128,64,0,761,759,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,
        1,0,0,0,764,127,1,0,0,0,765,763,1,0,0,0,766,776,3,122,61,0,767,776,
        3,134,67,0,768,776,5,54,0,0,769,776,5,55,0,0,770,776,5,56,0,0,771,
        776,5,19,0,0,772,776,5,20,0,0,773,776,5,18,0,0,774,776,5,53,0,0,
        775,766,1,0,0,0,775,767,1,0,0,0,775,768,1,0,0,0,775,769,1,0,0,0,
        775,770,1,0,0,0,775,771,1,0,0,0,775,772,1,0,0,0,775,773,1,0,0,0,
        775,774,1,0,0,0,776,129,1,0,0,0,777,778,5,49,0,0,778,779,5,54,0,
        0,779,785,5,50,0,0,780,781,5,49,0,0,781,782,5,54,0,0,782,784,5,50,
        0,0,783,780,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,
        0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,789,3,132,66,0,789,131,1,
        0,0,0,790,797,5,10,0,0,791,797,5,11,0,0,792,797,5,9,0,0,793,797,
        5,12,0,0,794,797,5,53,0,0,795,797,3,130,65,0,796,790,1,0,0,0,796,
        791,1,0,0,0,796,792,1,0,0,0,796,793,1,0,0,0,796,794,1,0,0,0,796,
        795,1,0,0,0,797,133,1,0,0,0,798,799,5,53,0,0,799,801,5,47,0,0,800,
        802,3,136,68,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,
        804,5,48,0,0,804,135,1,0,0,0,805,811,3,138,69,0,806,807,3,138,69,
        0,807,808,5,51,0,0,808,809,3,136,68,0,809,811,1,0,0,0,810,805,1,
        0,0,0,810,806,1,0,0,0,811,137,1,0,0,0,812,813,5,53,0,0,813,814,5,
        42,0,0,814,815,3,94,47,0,815,139,1,0,0,0,816,822,3,94,47,0,817,818,
        3,94,47,0,818,819,5,51,0,0,819,820,3,140,70,0,820,822,1,0,0,0,821,
        816,1,0,0,0,821,817,1,0,0,0,822,141,1,0,0,0,95,151,158,166,171,179,
        189,200,206,213,219,229,234,245,252,256,261,263,267,275,284,290,
        293,297,309,313,316,326,338,347,350,360,363,374,381,391,396,404,
        410,414,417,423,432,439,448,454,459,463,469,473,476,480,484,488,
        492,498,505,507,515,519,525,546,559,563,577,581,584,588,592,596,
        599,603,607,609,613,622,632,643,654,665,676,687,695,701,703,712,
        723,736,756,763,775,785,796,801,810,821
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
                     "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'.'", "':'", "':='", "'_'", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                      "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                      "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                      "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", 
                      "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
                      "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", 
                      "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", "SHORT_ASSIGN", 
                      "UNDERSCORE", "LP", "RP", "LB", "RB", "LSB", "RSB", 
                      "COMMA", "SEMI", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
                      "NEWLINE", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
                      "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    RULE_program = 0
    RULE_newlines = 1
    RULE_more_declared = 2
    RULE_declared = 3
    RULE_list_statement = 4
    RULE_statement = 5
    RULE_variables_declared = 6
    RULE_var_decl_list = 7
    RULE_var_decl = 8
    RULE_constants_declared = 9
    RULE_const_decl_list = 10
    RULE_const_decl = 11
    RULE_function_block_statement = 12
    RULE_function_declared = 13
    RULE_receiver = 14
    RULE_method_declared = 15
    RULE_method_params = 16
    RULE_method_param = 17
    RULE_params_list = 18
    RULE_param = 19
    RULE_struct_declared = 20
    RULE_struct_type_list = 21
    RULE_struct_field = 22
    RULE_more_ids = 23
    RULE_struct_end = 24
    RULE_struct_type = 25
    RULE_interface_declared = 26
    RULE_interface_type_list = 27
    RULE_interface_type = 28
    RULE_interface_method = 29
    RULE_optional_params = 30
    RULE_optional_type = 31
    RULE_optional_semi = 32
    RULE_declared_statement = 33
    RULE_assign_statement = 34
    RULE_assign_op = 35
    RULE_assign_lhs = 36
    RULE_if_statement = 37
    RULE_for_statement = 38
    RULE_for_init = 39
    RULE_for_update = 40
    RULE_break_statement = 41
    RULE_continue_statement = 42
    RULE_return_statement = 43
    RULE_call_statement = 44
    RULE_block_stmt = 45
    RULE_expr_list = 46
    RULE_expression = 47
    RULE_expression1 = 48
    RULE_expression2 = 49
    RULE_expression3 = 50
    RULE_expression4 = 51
    RULE_expression5 = 52
    RULE_expression6 = 53
    RULE_expression7 = 54
    RULE_operand = 55
    RULE_element_access = 56
    RULE_field_access = 57
    RULE_call_expr = 58
    RULE_literal = 59
    RULE_typed_array_literal = 60
    RULE_untyped_array_literal = 61
    RULE_array_literal = 62
    RULE_literal_list = 63
    RULE_literal_item = 64
    RULE_array_type = 65
    RULE_type_name = 66
    RULE_struct_literal = 67
    RULE_field_list = 68
    RULE_field_init = 69
    RULE_list_expression = 70

    ruleNames =  [ "program", "newlines", "more_declared", "declared", "list_statement", 
                   "statement", "variables_declared", "var_decl_list", "var_decl", 
                   "constants_declared", "const_decl_list", "const_decl", 
                   "function_block_statement", "function_declared", "receiver", 
                   "method_declared", "method_params", "method_param", "params_list", 
                   "param", "struct_declared", "struct_type_list", "struct_field", 
                   "more_ids", "struct_end", "struct_type", "interface_declared", 
                   "interface_type_list", "interface_type", "interface_method", 
                   "optional_params", "optional_type", "optional_semi", 
                   "declared_statement", "assign_statement", "assign_op", 
                   "assign_lhs", "if_statement", "for_statement", "for_init", 
                   "for_update", "break_statement", "continue_statement", 
                   "return_statement", "call_statement", "block_stmt", "expr_list", 
                   "expression", "expression1", "expression2", "expression3", 
                   "expression4", "expression5", "expression6", "expression7", 
                   "operand", "element_access", "field_access", "call_expr", 
                   "literal", "typed_array_literal", "untyped_array_literal", 
                   "array_literal", "literal_list", "literal_item", "array_type", 
                   "type_name", "struct_literal", "field_list", "field_init", 
                   "list_expression" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    FOR=3
    RETURN=4
    FUNC=5
    TYPE=6
    STRUCT=7
    INTERFACE=8
    STRING=9
    INT=10
    FLOAT=11
    BOOLEAN=12
    CONST=13
    VAR=14
    CONTINUE=15
    BREAK=16
    RANGE=17
    NIL=18
    TRUE=19
    FALSE=20
    ADD=21
    SUB=22
    MUL=23
    DIV=24
    MOD=25
    EQUAL=26
    NOT_EQUAL=27
    LESS=28
    LESS_OR_EQUAL=29
    GREATER=30
    GREATER_OR_EQUAL=31
    AND=32
    OR=33
    NOT=34
    ASSIGN=35
    ADD_ASSIGN=36
    SUB_ASSIGN=37
    MUL_ASSIGN=38
    DIV_ASSIGN=39
    MOD_ASSIGN=40
    DOT=41
    COLON=42
    SHORT_ASSIGN=43
    UNDERSCORE=44
    LP=45
    RP=46
    LB=47
    RB=48
    LSB=49
    RSB=50
    COMMA=51
    SEMI=52
    ID=53
    INT_LIT=54
    FLOAT_LIT=55
    STRING_LIT=56
    NEWLINE=57
    WS=58
    BLOCK_COMMENT=59
    LINE_COMMENT=60
    UNCLOSE_STRING=61
    ILLEGAL_ESCAPE=62
    ERROR_CHAR=63

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newlines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlinesContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlinesContext,i)


        def declared(self):
            return self.getTypedRuleContext(MiniGoParser.DeclaredContext,0)


        def more_declared(self):
            return self.getTypedRuleContext(MiniGoParser.More_declaredContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.newlines()
            self.state = 143
            self.declared()
            self.state = 144
            self.more_declared()
            self.state = 145
            self.newlines()
            self.state = 146
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_newlines




    def newlines(self):

        localctx = MiniGoParser.NewlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_newlines)
        try:
            self.state = 151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 1, 3, 4, 5, 6, 13, 14, 15, 16, 53]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.match(MiniGoParser.NEWLINE)
                self.state = 150
                self.newlines()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class More_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def declared(self):
            return self.getTypedRuleContext(MiniGoParser.DeclaredContext,0)


        def more_declared(self):
            return self.getTypedRuleContext(MiniGoParser.More_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_more_declared




    def more_declared(self):

        localctx = MiniGoParser.More_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_more_declared)
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 154
                self.newlines()
                self.state = 155
                self.declared()
                self.state = 156
                self.more_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_declared




    def declared(self):

        localctx = MiniGoParser.DeclaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_declared)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 160
                self.variables_declared()
                pass

            elif la_ == 2:
                self.state = 161
                self.constants_declared()
                pass

            elif la_ == 3:
                self.state = 162
                self.function_declared()
                pass

            elif la_ == 4:
                self.state = 163
                self.method_declared()
                pass

            elif la_ == 5:
                self.state = 164
                self.struct_declared()
                pass

            elif la_ == 6:
                self.state = 165
                self.interface_declared()
                pass


            self.state = 171
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 168
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_list_statement)
        try:
            self.state = 179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.statement()
                self.state = 176
                self.newlines()
                self.state = 177
                self.list_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 181
                self.declared_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.assign_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.if_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 184
                self.for_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 185
                self.break_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 186
                self.continue_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 187
                self.call_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 188
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variables_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def var_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_listContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_variables_declared




    def variables_declared(self):

        localctx = MiniGoParser.Variables_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variables_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(MiniGoParser.VAR)
            self.state = 192
            self.var_decl_list()
            self.state = 193
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def var_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl_list




    def var_decl_list(self):

        localctx = MiniGoParser.Var_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_var_decl_list)
        try:
            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.var_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.var_decl()
                self.state = 197
                self.match(MiniGoParser.COMMA)
                self.state = 198
                self.var_decl_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def expr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Expr_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl




    def var_decl(self):

        localctx = MiniGoParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_var_decl)
        self._la = 0 # Token type
        try:
            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(MiniGoParser.ID)
                self.state = 203
                self.type_name()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 204
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 205
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 208
                self.match(MiniGoParser.ID)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 209
                    self.match(MiniGoParser.COMMA)
                    self.state = 210
                    self.match(MiniGoParser.ID)
                    self.state = 215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 216
                self.type_name()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 217
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 218
                    self.expr_list()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 221
                self.match(MiniGoParser.ID)

                self.state = 222
                self.match(MiniGoParser.ASSIGN)
                self.state = 223
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 224
                self.match(MiniGoParser.ID)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 225
                    self.match(MiniGoParser.COMMA)
                    self.state = 226
                    self.match(MiniGoParser.ID)
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(MiniGoParser.ASSIGN)
                self.state = 233
                self.expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def const_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Const_decl_listContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared




    def constants_declared(self):

        localctx = MiniGoParser.Constants_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_constants_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(MiniGoParser.CONST)
            self.state = 237
            self.const_decl_list()
            self.state = 238
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def const_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Const_decl_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl_list




    def const_decl_list(self):

        localctx = MiniGoParser.Const_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_const_decl_list)
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.const_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.const_decl()
                self.state = 242
                self.match(MiniGoParser.COMMA)
                self.state = 243
                self.const_decl_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(MiniGoParser.ID)
            self.state = 248
            self.match(MiniGoParser.ASSIGN)
            self.state = 249
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.StatementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.StatementContext,i)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_function_block_statement




    def function_block_statement(self):

        localctx = MiniGoParser.Function_block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_function_block_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 251
                self.match(MiniGoParser.NEWLINE)


            self.state = 254
            self.match(MiniGoParser.LB)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 255
                self.match(MiniGoParser.NEWLINE)


            self.state = 258
            self.statement()
            self.state = 263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 261
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 4, 13, 14, 15, 16, 53]:
                        self.state = 259
                        self.statement()
                        pass
                    elif token in [57]:
                        self.state = 260
                        self.match(MiniGoParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 266
                self.match(MiniGoParser.NEWLINE)


            self.state = 269
            self.match(MiniGoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LP)
            else:
                return self.getToken(MiniGoParser.LP, i)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RP)
            else:
                return self.getToken(MiniGoParser.RP, i)

        def function_block_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Function_block_statementContext,0)


        def params_list(self):
            return self.getTypedRuleContext(MiniGoParser.Params_listContext,0)


        def type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Type_nameContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Type_nameContext,i)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_function_declared




    def function_declared(self):

        localctx = MiniGoParser.Function_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(MiniGoParser.FUNC)
            self.state = 272
            self.match(MiniGoParser.ID)
            self.state = 273
            self.match(MiniGoParser.LP)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 274
                self.params_list()


            self.state = 277
            self.match(MiniGoParser.RP)
            self.state = 290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.state = 278
                self.match(MiniGoParser.LP)
                self.state = 279
                self.type_name()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 280
                    self.match(MiniGoParser.COMMA)
                    self.state = 281
                    self.type_name()
                    self.state = 286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 287
                self.match(MiniGoParser.RP)
                pass
            elif token in [9, 10, 11, 12, 49, 53]:
                self.state = 289
                self.type_name()
                pass
            elif token in [47, 57]:
                pass
            else:
                pass
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 292
                self.match(MiniGoParser.NEWLINE)


            self.state = 295
            self.function_block_statement()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 296
                self.match(MiniGoParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_receiver




    def receiver(self):

        localctx = MiniGoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_receiver)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(MiniGoParser.ID)
            self.state = 300
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199254741376) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LP)
            else:
                return self.getToken(MiniGoParser.LP, i)

        def receiver(self):
            return self.getTypedRuleContext(MiniGoParser.ReceiverContext,0)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RP)
            else:
                return self.getToken(MiniGoParser.RP, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def block_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Block_stmtContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def params_list(self):
            return self.getTypedRuleContext(MiniGoParser.Params_listContext,0)


        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_declared




    def method_declared(self):

        localctx = MiniGoParser.Method_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_method_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(MiniGoParser.FUNC)
            self.state = 303
            self.match(MiniGoParser.LP)
            self.state = 304
            self.receiver()
            self.state = 305
            self.match(MiniGoParser.RP)
            self.state = 306
            self.match(MiniGoParser.ID)
            self.state = 307
            self.match(MiniGoParser.LP)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 308
                self.params_list()


            self.state = 311
            self.match(MiniGoParser.RP)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208169984) != 0):
                self.state = 312
                self.type_name()


            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 315
                self.match(MiniGoParser.NEWLINE)


            self.state = 318
            self.block_stmt()
            self.state = 319
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_param(self):
            return self.getTypedRuleContext(MiniGoParser.Method_paramContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def method_params(self):
            return self.getTypedRuleContext(MiniGoParser.Method_paramsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_params




    def method_params(self):

        localctx = MiniGoParser.Method_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_method_params)
        try:
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.method_param()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.method_param()
                self.state = 323
                self.match(MiniGoParser.COMMA)
                self.state = 324
                self.method_params()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_param




    def method_param(self):

        localctx = MiniGoParser.Method_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_method_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(MiniGoParser.ID)
            self.state = 329
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Params_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ParamContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ParamContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_params_list




    def params_list(self):

        localctx = MiniGoParser.Params_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_params_list)
        self._la = 0 # Token type
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.match(MiniGoParser.ID)
                self.state = 332
                self.type_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.match(MiniGoParser.ID)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 334
                    self.match(MiniGoParser.COMMA)
                    self.state = 335
                    self.match(MiniGoParser.ID)
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 341
                self.type_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.param()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 343
                    self.match(MiniGoParser.COMMA)
                    self.state = 344
                    self.param()
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_param




    def param(self):

        localctx = MiniGoParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 352
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 353
                self.match(MiniGoParser.ID)
                self.state = 354
                self.match(MiniGoParser.COMMA)
                self.state = 355
                self.match(MiniGoParser.ID)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 356
                    self.match(MiniGoParser.COMMA)
                    self.state = 357
                    self.match(MiniGoParser.ID)
                    self.state = 362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 365
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def struct_type_list(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_type_listContext,0)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_declared




    def struct_declared(self):

        localctx = MiniGoParser.Struct_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_struct_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(MiniGoParser.TYPE)
            self.state = 368
            self.match(MiniGoParser.ID)
            self.state = 369
            self.match(MiniGoParser.STRUCT)
            self.state = 370
            self.match(MiniGoParser.LB)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 371
                self.match(MiniGoParser.NEWLINE)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self.struct_type_list()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 378
                self.match(MiniGoParser.NEWLINE)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 384
            self.match(MiniGoParser.RB)
            self.state = 385
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Struct_fieldContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Struct_fieldContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_type_list




    def struct_type_list(self):

        localctx = MiniGoParser.Struct_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_struct_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 387
                self.struct_field()
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 388
                        self.match(MiniGoParser.NEWLINE) 
                    self.state = 393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 396 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==5 or _la==53):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def more_ids(self):
            return self.getTypedRuleContext(MiniGoParser.More_idsContext,0)


        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def struct_end(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_endContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field




    def struct_field(self):

        localctx = MiniGoParser.Struct_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_struct_field)
        try:
            self.state = 404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.match(MiniGoParser.ID)
                self.state = 399
                self.more_ids()
                self.state = 400
                self.type_name()
                self.state = 401
                self.struct_end()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.method_declared()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class More_idsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def more_ids(self):
            return self.getTypedRuleContext(MiniGoParser.More_idsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_more_ids




    def more_ids(self):

        localctx = MiniGoParser.More_idsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_more_ids)
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12, 49, 53]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.match(MiniGoParser.COMMA)
                self.state = 408
                self.match(MiniGoParser.ID)
                self.state = 409
                self.more_ids()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_endContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_end




    def struct_end(self):

        localctx = MiniGoParser.Struct_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_struct_end)
        self._la = 0 # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.match(MiniGoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 413
                    self.match(MiniGoParser.SEMI)


                self.state = 416
                self.match(MiniGoParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_fieldContext,0)


        def struct_type(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_type




    def struct_type(self):

        localctx = MiniGoParser.Struct_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_struct_type)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.struct_field()
                self.state = 421
                self.struct_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def interface_type_list(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_type_listContext,0)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_declared




    def interface_declared(self):

        localctx = MiniGoParser.Interface_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_interface_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(MiniGoParser.TYPE)
            self.state = 426
            self.match(MiniGoParser.ID)
            self.state = 427
            self.match(MiniGoParser.INTERFACE)
            self.state = 428
            self.match(MiniGoParser.LB)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 429
                self.match(MiniGoParser.NEWLINE)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.interface_type_list()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 436
                self.match(MiniGoParser.NEWLINE)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(MiniGoParser.RB)
            self.state = 443
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_method(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Interface_methodContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Interface_methodContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_type_list




    def interface_type_list(self):

        localctx = MiniGoParser.Interface_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_interface_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 445
                self.interface_method()
                self.state = 448 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==53):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_method(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_methodContext,0)


        def interface_type(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_type




    def interface_type(self):

        localctx = MiniGoParser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interface_type)
        try:
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.interface_method()
                self.state = 452
                self.interface_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def params_list(self):
            return self.getTypedRuleContext(MiniGoParser.Params_listContext,0)


        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_method




    def interface_method(self):

        localctx = MiniGoParser.Interface_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interface_method)
        self._la = 0 # Token type
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.match(MiniGoParser.ID)
                self.state = 457
                self.match(MiniGoParser.LP)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 458
                    self.params_list()


                self.state = 461
                self.match(MiniGoParser.RP)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208169984) != 0):
                    self.state = 462
                    self.type_name()


                self.state = 465
                _la = self._input.LA(1)
                if not(_la==52 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.match(MiniGoParser.ID)
                self.state = 467
                self.match(MiniGoParser.LP)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 468
                    self.params_list()


                self.state = 471
                self.match(MiniGoParser.RP)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208169984) != 0):
                    self.state = 472
                    self.type_name()


                self.state = 475
                _la = self._input.LA(1)
                if not(_la==52 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def params_list(self):
            return self.getTypedRuleContext(MiniGoParser.Params_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_optional_params




    def optional_params(self):

        localctx = MiniGoParser.Optional_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_optional_params)
        try:
            self.state = 480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.params_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_optional_type




    def optional_type(self):

        localctx = MiniGoParser.Optional_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_optional_type)
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [9, 10, 11, 12, 49, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.type_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_semiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_optional_semi




    def optional_semi(self):

        localctx = MiniGoParser.Optional_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_optional_semi)
        try:
            self.state = 488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(MiniGoParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_declared_statement)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.variables_declared()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.constants_declared()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_lhs(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_lhsContext,0)


        def assign_op(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_opContext,0)


        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.assign_lhs()
            self.state = 495
            self.assign_op()
            self.state = 496
            self.expression(0)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 497
                self.match(MiniGoParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_op




    def assign_op(self):

        localctx = MiniGoParser.Assign_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_assign_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 10960756539392) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_lhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def field_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Field_accessContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Field_accessContext,i)


        def element_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Element_accessContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Element_accessContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_lhs




    def assign_lhs(self):

        localctx = MiniGoParser.Assign_lhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assign_lhs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(MiniGoParser.ID)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==49:
                self.state = 505
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [41]:
                    self.state = 503
                    self.field_access()
                    pass
                elif token in [49]:
                    self.state = 504
                    self.element_access()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def block_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Block_stmtContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Block_stmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(MiniGoParser.IF)
            self.state = 511
            self.match(MiniGoParser.LP)
            self.state = 512
            self.expression(0)
            self.state = 513
            self.match(MiniGoParser.RP)
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 514
                self.match(MiniGoParser.NEWLINE)


            self.state = 517
            self.block_stmt()
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 518
                self.match(MiniGoParser.NEWLINE)


            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 521
                self.match(MiniGoParser.ELSE)
                self.state = 522
                self.if_statement()

            elif la_ == 2:
                self.state = 523
                self.match(MiniGoParser.ELSE)
                self.state = 524
                self.block_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def block_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Block_stmtContext,0)


        def for_init(self):
            return self.getTypedRuleContext(MiniGoParser.For_initContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMI)
            else:
                return self.getToken(MiniGoParser.SEMI, i)

        def for_update(self):
            return self.getTypedRuleContext(MiniGoParser.For_updateContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def UNDERSCORE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.UNDERSCORE)
            else:
                return self.getToken(MiniGoParser.UNDERSCORE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(MiniGoParser.FOR)
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 528
                _la = self._input.LA(1)
                if not(_la==44 or _la==53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 529
                self.match(MiniGoParser.COMMA)
                self.state = 530
                _la = self._input.LA(1)
                if not(_la==44 or _la==53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 531
                self.match(MiniGoParser.SHORT_ASSIGN)
                self.state = 532
                self.match(MiniGoParser.RANGE)
                self.state = 533
                self.expression(0)
                self.state = 534
                self.block_stmt()
                pass

            elif la_ == 2:
                self.state = 536
                self.for_init()
                self.state = 537
                self.match(MiniGoParser.SEMI)
                self.state = 538
                self.expression(0)
                self.state = 539
                self.match(MiniGoParser.SEMI)
                self.state = 540
                self.for_update()
                self.state = 541
                self.block_stmt()
                pass

            elif la_ == 3:
                self.state = 543
                self.expression(0)
                self.state = 544
                self.block_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_lhs(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_lhsContext,0)


        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def assign_op(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_opContext,0)


        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_init




    def for_init(self):

        localctx = MiniGoParser.For_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_for_init)
        self._la = 0 # Token type
        try:
            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.assign_lhs()
                self.state = 549
                self.match(MiniGoParser.SHORT_ASSIGN)
                self.state = 550
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.assign_lhs()
                self.state = 553
                self.assign_op()
                self.state = 554
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.match(MiniGoParser.VAR)
                self.state = 557
                self.match(MiniGoParser.ID)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9570149208169984) != 0):
                    self.state = 558
                    self.type_name()


                self.state = 561
                self.match(MiniGoParser.ASSIGN)
                self.state = 562
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assign_lhs(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_lhsContext,0)


        def assign_op(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_opContext,0)


        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_update




    def for_update(self):

        localctx = MiniGoParser.For_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.assign_lhs()
            self.state = 566
            self.assign_op()
            self.state = 567
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_break_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(MiniGoParser.BREAK)
            self.state = 570
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(MiniGoParser.CONTINUE)
            self.state = 573
            _la = self._input.LA(1)
            if not(_la==52 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(MiniGoParser.RETURN)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 135846877820878848) != 0):
                    self.state = 576
                    self.expression(0)


                self.state = 579
                self.match(MiniGoParser.SEMI)
                pass

            elif la_ == 2:
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 135846877820878848) != 0):
                    self.state = 580
                    self.expression(0)


                self.state = 583
                self.match(MiniGoParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def assign_lhs(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_lhsContext,0)


        def list_expression(self):
            return self.getTypedRuleContext(MiniGoParser.List_expressionContext,0)


        def SEMI(self):
            return self.getToken(MiniGoParser.SEMI, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_call_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 586
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 587
                self.assign_lhs()
                pass


            self.state = 590
            self.match(MiniGoParser.LP)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 135846877820878848) != 0):
                self.state = 591
                self.list_expression()


            self.state = 594
            self.match(MiniGoParser.RP)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 595
                self.match(MiniGoParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.StatementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.StatementContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_block_stmt




    def block_stmt(self):

        localctx = MiniGoParser.Block_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_block_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 598
                self.match(MiniGoParser.NEWLINE)


            self.state = 601
            self.match(MiniGoParser.LB)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 602
                self.match(MiniGoParser.NEWLINE)


            self.state = 609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 3, 4, 13, 14, 15, 16, 53]:
                        self.state = 605
                        self.statement()
                        pass
                    elif token in [57]:
                        self.state = 606
                        self.match(MiniGoParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 612
                self.match(MiniGoParser.NEWLINE)


            self.state = 615
            self.match(MiniGoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def expr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Expr_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr_list




    def expr_list(self):

        localctx = MiniGoParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expr_list)
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.expression(0)
                self.state = 619
                self.match(MiniGoParser.COMMA)
                self.state = 620
                self.expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(MiniGoParser.Expression1Context,0)


        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.expression1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 627
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 628
                    self.match(MiniGoParser.OR)
                    self.state = 629
                    self.expression1(0) 
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression2(self):
            return self.getTypedRuleContext(MiniGoParser.Expression2Context,0)


        def expression1(self):
            return self.getTypedRuleContext(MiniGoParser.Expression1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression1



    def expression1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_expression1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.expression2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression1)
                    self.state = 638
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 639
                    self.match(MiniGoParser.AND)
                    self.state = 640
                    self.expression2(0) 
                self.state = 645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression3(self):
            return self.getTypedRuleContext(MiniGoParser.Expression3Context,0)


        def expression2(self):
            return self.getTypedRuleContext(MiniGoParser.Expression2Context,0)


        def EQUAL(self):
            return self.getToken(MiniGoParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(MiniGoParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression2



    def expression2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_expression2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.expression3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression2)
                    self.state = 649
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 650
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 651
                    self.expression3(0) 
                self.state = 656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression4(self):
            return self.getTypedRuleContext(MiniGoParser.Expression4Context,0)


        def expression3(self):
            return self.getTypedRuleContext(MiniGoParser.Expression3Context,0)


        def LESS(self):
            return self.getToken(MiniGoParser.LESS, 0)

        def LESS_OR_EQUAL(self):
            return self.getToken(MiniGoParser.LESS_OR_EQUAL, 0)

        def GREATER(self):
            return self.getToken(MiniGoParser.GREATER, 0)

        def GREATER_OR_EQUAL(self):
            return self.getToken(MiniGoParser.GREATER_OR_EQUAL, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression3



    def expression3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_expression3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.expression4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 665
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression3)
                    self.state = 660
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 661
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 662
                    self.expression4(0) 
                self.state = 667
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression5(self):
            return self.getTypedRuleContext(MiniGoParser.Expression5Context,0)


        def expression4(self):
            return self.getTypedRuleContext(MiniGoParser.Expression4Context,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression4



    def expression4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_expression4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.expression5(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression4)
                    self.state = 671
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 672
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 673
                    self.expression5(0) 
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression6(self):
            return self.getTypedRuleContext(MiniGoParser.Expression6Context,0)


        def expression5(self):
            return self.getTypedRuleContext(MiniGoParser.Expression5Context,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression5



    def expression5(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression5Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_expression5, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.expression6()
            self._ctx.stop = self._input.LT(-1)
            self.state = 687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression5Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression5)
                    self.state = 682
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 683
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 684
                    self.expression6() 
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def expression6(self):
            return self.getTypedRuleContext(MiniGoParser.Expression6Context,0)


        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def expression7(self):
            return self.getTypedRuleContext(MiniGoParser.Expression7Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression6




    def expression6(self):

        localctx = MiniGoParser.Expression6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_expression6)
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.match(MiniGoParser.NOT)
                self.state = 691
                self.expression6()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.match(MiniGoParser.SUB)
                self.state = 693
                self.expression6()
                pass
            elif token in [18, 19, 20, 45, 47, 49, 53, 54, 55, 56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 694
                self.expression7()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(MiniGoParser.OperandContext,0)


        def element_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Element_accessContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Element_accessContext,i)


        def field_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Field_accessContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Field_accessContext,i)


        def call_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Call_exprContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Call_exprContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression7




    def expression7(self):

        localctx = MiniGoParser.Expression7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expression7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.operand()
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 701
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [49]:
                        self.state = 698
                        self.element_access()
                        pass
                    elif token in [41]:
                        self.state = 699
                        self.field_access()
                        pass
                    elif token in [45]:
                        self.state = 700
                        self.call_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_operand




    def operand(self):

        localctx = MiniGoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_operand)
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.match(MiniGoParser.LP)
                self.state = 709
                self.expression(0)
                self.state = 710
                self.match(MiniGoParser.RP)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSB(self):
            return self.getToken(MiniGoParser.LSB, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RSB(self):
            return self.getToken(MiniGoParser.RSB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_element_access




    def element_access(self):

        localctx = MiniGoParser.Element_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_element_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(MiniGoParser.LSB)
            self.state = 715
            self.expression(0)
            self.state = 716
            self.match(MiniGoParser.RSB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_field_access




    def field_access(self):

        localctx = MiniGoParser.Field_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_field_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(MiniGoParser.DOT)
            self.state = 719
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def list_expression(self):
            return self.getTypedRuleContext(MiniGoParser.List_expressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_call_expr




    def call_expr(self):

        localctx = MiniGoParser.Call_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_call_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(MiniGoParser.LP)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 135846877820878848) != 0):
                self.state = 722
                self.list_expression()


            self.state = 725
            self.match(MiniGoParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def typed_array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Typed_array_literalContext,0)


        def untyped_array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Untyped_array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_literal)
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 730
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 6)
                self.state = 732
                self.match(MiniGoParser.NIL)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 7)
                self.state = 733
                self.typed_array_literal()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 8)
                self.state = 734
                self.untyped_array_literal()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 9)
                self.state = 735
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typed_array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_type(self):
            return self.getTypedRuleContext(MiniGoParser.Array_typeContext,0)


        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def literal_list(self):
            return self.getTypedRuleContext(MiniGoParser.Literal_listContext,0)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_typed_array_literal




    def typed_array_literal(self):

        localctx = MiniGoParser.Typed_array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typed_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.array_type()
            self.state = 739
            self.match(MiniGoParser.LB)
            self.state = 740
            self.literal_list()
            self.state = 741
            self.match(MiniGoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Untyped_array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def literal_list(self):
            return self.getTypedRuleContext(MiniGoParser.Literal_listContext,0)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_untyped_array_literal




    def untyped_array_literal(self):

        localctx = MiniGoParser.Untyped_array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_untyped_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(MiniGoParser.LB)
            self.state = 744
            self.literal_list()
            self.state = 745
            self.match(MiniGoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_type(self):
            return self.getTypedRuleContext(MiniGoParser.Array_typeContext,0)


        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def literal_list(self):
            return self.getTypedRuleContext(MiniGoParser.Literal_listContext,0)


        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_array_literal)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.array_type()
                self.state = 748
                self.match(MiniGoParser.LB)
                self.state = 749
                self.literal_list()
                self.state = 750
                self.match(MiniGoParser.RB)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(MiniGoParser.LB)
                self.state = 753
                self.literal_list()
                self.state = 754
                self.match(MiniGoParser.RB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Literal_itemContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Literal_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal_list




    def literal_list(self):

        localctx = MiniGoParser.Literal_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_literal_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.literal_item()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 759
                self.match(MiniGoParser.COMMA)
                self.state = 760
                self.literal_item()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def untyped_array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Untyped_array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_literal_item




    def literal_item(self):

        localctx = MiniGoParser.Literal_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_literal_item)
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.untyped_array_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.struct_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.match(MiniGoParser.INT_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.match(MiniGoParser.FLOAT_LIT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 771
                self.match(MiniGoParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 772
                self.match(MiniGoParser.FALSE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 773
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 774
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSB(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LSB)
            else:
                return self.getToken(MiniGoParser.LSB, i)

        def INT_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.INT_LIT)
            else:
                return self.getToken(MiniGoParser.INT_LIT, i)

        def RSB(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RSB)
            else:
                return self.getToken(MiniGoParser.RSB, i)

        def type_name(self):
            return self.getTypedRuleContext(MiniGoParser.Type_nameContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_type




    def array_type(self):

        localctx = MiniGoParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(MiniGoParser.LSB)
            self.state = 778
            self.match(MiniGoParser.INT_LIT)
            self.state = 779
            self.match(MiniGoParser.RSB)
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 780
                    self.match(MiniGoParser.LSB)
                    self.state = 781
                    self.match(MiniGoParser.INT_LIT)
                    self.state = 782
                    self.match(MiniGoParser.RSB) 
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 788
            self.type_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_type(self):
            return self.getTypedRuleContext(MiniGoParser.Array_typeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_type_name




    def type_name(self):

        localctx = MiniGoParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_type_name)
        try:
            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(MiniGoParser.INT)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.match(MiniGoParser.FLOAT)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.match(MiniGoParser.STRING)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.match(MiniGoParser.BOOLEAN)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 794
                self.match(MiniGoParser.ID)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 6)
                self.state = 795
                self.array_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LB(self):
            return self.getToken(MiniGoParser.LB, 0)

        def RB(self):
            return self.getToken(MiniGoParser.RB, 0)

        def field_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_struct_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(MiniGoParser.ID)
            self.state = 799
            self.match(MiniGoParser.LB)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 800
                self.field_list()


            self.state = 803
            self.match(MiniGoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_list




    def field_list(self):

        localctx = MiniGoParser.Field_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_field_list)
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.field_init()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.field_init()
                self.state = 807
                self.match(MiniGoParser.COMMA)
                self.state = 808
                self.field_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MiniGoParser.ID)
            self.state = 813
            self.match(MiniGoParser.COLON)
            self.state = 814
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_expression(self):
            return self.getTypedRuleContext(MiniGoParser.List_expressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_expression




    def list_expression(self):

        localctx = MiniGoParser.List_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_list_expression)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.expression(0)
                self.state = 818
                self.match(MiniGoParser.COMMA)
                self.state = 819
                self.list_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.expression_sempred
        self._predicates[48] = self.expression1_sempred
        self._predicates[49] = self.expression2_sempred
        self._predicates[50] = self.expression3_sempred
        self._predicates[51] = self.expression4_sempred
        self._predicates[52] = self.expression5_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def expression1_sempred(self, localctx:Expression1Context, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def expression2_sempred(self, localctx:Expression2Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def expression3_sempred(self, localctx:Expression3Context, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def expression4_sempred(self, localctx:Expression4Context, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def expression5_sempred(self, localctx:Expression5Context, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         





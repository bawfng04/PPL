# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,555,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
        1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,5,53,350,
        8,53,10,53,12,53,353,9,53,1,54,1,54,1,54,5,54,358,8,54,10,54,12,
        54,361,9,54,3,54,363,8,54,1,55,1,55,1,55,1,55,3,55,369,8,55,1,55,
        4,55,372,8,55,11,55,12,55,373,1,56,1,56,1,56,1,56,3,56,380,8,56,
        1,56,4,56,383,8,56,11,56,12,56,384,1,57,1,57,1,57,1,57,3,57,391,
        8,57,1,57,4,57,394,8,57,11,57,12,57,395,1,58,1,58,1,58,5,58,401,
        8,58,10,58,12,58,404,9,58,3,58,406,8,58,1,59,1,59,5,59,410,8,59,
        10,59,12,59,413,9,59,1,60,1,60,3,60,417,8,60,1,60,1,60,1,60,5,60,
        422,8,60,10,60,12,60,425,9,60,3,60,427,8,60,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,3,61,439,8,61,1,62,1,62,1,62,3,62,
        444,8,62,1,62,1,62,1,62,1,62,1,62,4,62,451,8,62,11,62,12,62,452,
        1,62,3,62,456,8,62,1,62,1,62,1,62,3,62,461,8,62,1,63,1,63,1,64,1,
        64,1,64,3,64,468,8,64,1,65,1,65,5,65,472,8,65,10,65,12,65,475,9,
        65,1,65,1,65,1,65,1,66,4,66,481,8,66,11,66,12,66,482,1,66,1,66,1,
        67,1,67,1,67,1,67,1,67,5,67,492,8,67,10,67,12,67,495,9,67,1,67,1,
        67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,506,8,68,10,68,12,68,
        509,9,68,1,68,3,68,512,8,68,1,68,1,68,1,68,1,68,1,69,3,69,519,8,
        69,1,69,1,69,1,69,1,70,1,70,5,70,526,8,70,10,70,12,70,529,9,70,1,
        70,3,70,532,8,70,1,70,1,70,1,71,1,71,5,71,538,8,71,10,71,12,71,541,
        9,71,1,71,1,71,1,71,5,71,546,8,71,10,71,12,71,549,9,71,1,71,1,71,
        1,72,1,72,1,72,1,493,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
        105,53,107,54,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,55,125,
        56,127,0,129,0,131,57,133,58,135,59,137,60,139,61,141,62,143,63,
        145,64,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,3,0,48,57,65,70,97,102,1,0,48,55,1,0,48,49,2,
        0,69,69,101,101,2,0,43,43,45,45,7,0,34,34,39,39,92,92,98,98,110,
        110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,9,12,12,32,
        32,2,0,10,10,13,13,2,1,10,10,13,13,580,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,131,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
        1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,3,154,1,0,0,0,
        5,157,1,0,0,0,7,162,1,0,0,0,9,166,1,0,0,0,11,173,1,0,0,0,13,178,
        1,0,0,0,15,183,1,0,0,0,17,190,1,0,0,0,19,200,1,0,0,0,21,207,1,0,
        0,0,23,211,1,0,0,0,25,217,1,0,0,0,27,225,1,0,0,0,29,231,1,0,0,0,
        31,235,1,0,0,0,33,244,1,0,0,0,35,250,1,0,0,0,37,256,1,0,0,0,39,260,
        1,0,0,0,41,265,1,0,0,0,43,271,1,0,0,0,45,273,1,0,0,0,47,275,1,0,
        0,0,49,277,1,0,0,0,51,279,1,0,0,0,53,281,1,0,0,0,55,284,1,0,0,0,
        57,287,1,0,0,0,59,289,1,0,0,0,61,292,1,0,0,0,63,294,1,0,0,0,65,297,
        1,0,0,0,67,300,1,0,0,0,69,303,1,0,0,0,71,305,1,0,0,0,73,307,1,0,
        0,0,75,310,1,0,0,0,77,313,1,0,0,0,79,316,1,0,0,0,81,319,1,0,0,0,
        83,322,1,0,0,0,85,324,1,0,0,0,87,326,1,0,0,0,89,329,1,0,0,0,91,331,
        1,0,0,0,93,333,1,0,0,0,95,335,1,0,0,0,97,337,1,0,0,0,99,339,1,0,
        0,0,101,341,1,0,0,0,103,343,1,0,0,0,105,345,1,0,0,0,107,347,1,0,
        0,0,109,362,1,0,0,0,111,368,1,0,0,0,113,379,1,0,0,0,115,390,1,0,
        0,0,117,405,1,0,0,0,119,407,1,0,0,0,121,414,1,0,0,0,123,438,1,0,
        0,0,125,460,1,0,0,0,127,462,1,0,0,0,129,467,1,0,0,0,131,469,1,0,
        0,0,133,480,1,0,0,0,135,486,1,0,0,0,137,501,1,0,0,0,139,518,1,0,
        0,0,141,523,1,0,0,0,143,535,1,0,0,0,145,552,1,0,0,0,147,148,5,118,
        0,0,148,149,5,111,0,0,149,150,5,116,0,0,150,151,5,105,0,0,151,152,
        5,101,0,0,152,153,5,110,0,0,153,2,1,0,0,0,154,155,5,105,0,0,155,
        156,5,102,0,0,156,4,1,0,0,0,157,158,5,101,0,0,158,159,5,108,0,0,
        159,160,5,115,0,0,160,161,5,101,0,0,161,6,1,0,0,0,162,163,5,102,
        0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,8,1,0,0,0,166,167,5,
        114,0,0,167,168,5,101,0,0,168,169,5,116,0,0,169,170,5,117,0,0,170,
        171,5,114,0,0,171,172,5,110,0,0,172,10,1,0,0,0,173,174,5,102,0,0,
        174,175,5,117,0,0,175,176,5,110,0,0,176,177,5,99,0,0,177,12,1,0,
        0,0,178,179,5,116,0,0,179,180,5,121,0,0,180,181,5,112,0,0,181,182,
        5,101,0,0,182,14,1,0,0,0,183,184,5,115,0,0,184,185,5,116,0,0,185,
        186,5,114,0,0,186,187,5,117,0,0,187,188,5,99,0,0,188,189,5,116,0,
        0,189,16,1,0,0,0,190,191,5,105,0,0,191,192,5,110,0,0,192,193,5,116,
        0,0,193,194,5,101,0,0,194,195,5,114,0,0,195,196,5,102,0,0,196,197,
        5,97,0,0,197,198,5,99,0,0,198,199,5,101,0,0,199,18,1,0,0,0,200,201,
        5,115,0,0,201,202,5,116,0,0,202,203,5,114,0,0,203,204,5,105,0,0,
        204,205,5,110,0,0,205,206,5,103,0,0,206,20,1,0,0,0,207,208,5,105,
        0,0,208,209,5,110,0,0,209,210,5,116,0,0,210,22,1,0,0,0,211,212,5,
        102,0,0,212,213,5,108,0,0,213,214,5,111,0,0,214,215,5,97,0,0,215,
        216,5,116,0,0,216,24,1,0,0,0,217,218,5,98,0,0,218,219,5,111,0,0,
        219,220,5,111,0,0,220,221,5,108,0,0,221,222,5,101,0,0,222,223,5,
        97,0,0,223,224,5,110,0,0,224,26,1,0,0,0,225,226,5,99,0,0,226,227,
        5,111,0,0,227,228,5,110,0,0,228,229,5,115,0,0,229,230,5,116,0,0,
        230,28,1,0,0,0,231,232,5,118,0,0,232,233,5,97,0,0,233,234,5,114,
        0,0,234,30,1,0,0,0,235,236,5,99,0,0,236,237,5,111,0,0,237,238,5,
        110,0,0,238,239,5,116,0,0,239,240,5,105,0,0,240,241,5,110,0,0,241,
        242,5,117,0,0,242,243,5,101,0,0,243,32,1,0,0,0,244,245,5,98,0,0,
        245,246,5,114,0,0,246,247,5,101,0,0,247,248,5,97,0,0,248,249,5,107,
        0,0,249,34,1,0,0,0,250,251,5,114,0,0,251,252,5,97,0,0,252,253,5,
        110,0,0,253,254,5,103,0,0,254,255,5,101,0,0,255,36,1,0,0,0,256,257,
        5,110,0,0,257,258,5,105,0,0,258,259,5,108,0,0,259,38,1,0,0,0,260,
        261,5,116,0,0,261,262,5,114,0,0,262,263,5,117,0,0,263,264,5,101,
        0,0,264,40,1,0,0,0,265,266,5,102,0,0,266,267,5,97,0,0,267,268,5,
        108,0,0,268,269,5,115,0,0,269,270,5,101,0,0,270,42,1,0,0,0,271,272,
        5,43,0,0,272,44,1,0,0,0,273,274,5,45,0,0,274,46,1,0,0,0,275,276,
        5,42,0,0,276,48,1,0,0,0,277,278,5,47,0,0,278,50,1,0,0,0,279,280,
        5,37,0,0,280,52,1,0,0,0,281,282,5,61,0,0,282,283,5,61,0,0,283,54,
        1,0,0,0,284,285,5,33,0,0,285,286,5,61,0,0,286,56,1,0,0,0,287,288,
        5,60,0,0,288,58,1,0,0,0,289,290,5,60,0,0,290,291,5,61,0,0,291,60,
        1,0,0,0,292,293,5,62,0,0,293,62,1,0,0,0,294,295,5,62,0,0,295,296,
        5,61,0,0,296,64,1,0,0,0,297,298,5,38,0,0,298,299,5,38,0,0,299,66,
        1,0,0,0,300,301,5,124,0,0,301,302,5,124,0,0,302,68,1,0,0,0,303,304,
        5,33,0,0,304,70,1,0,0,0,305,306,5,61,0,0,306,72,1,0,0,0,307,308,
        5,43,0,0,308,309,5,61,0,0,309,74,1,0,0,0,310,311,5,45,0,0,311,312,
        5,61,0,0,312,76,1,0,0,0,313,314,5,42,0,0,314,315,5,61,0,0,315,78,
        1,0,0,0,316,317,5,47,0,0,317,318,5,61,0,0,318,80,1,0,0,0,319,320,
        5,37,0,0,320,321,5,61,0,0,321,82,1,0,0,0,322,323,5,46,0,0,323,84,
        1,0,0,0,324,325,5,58,0,0,325,86,1,0,0,0,326,327,5,58,0,0,327,328,
        5,61,0,0,328,88,1,0,0,0,329,330,5,95,0,0,330,90,1,0,0,0,331,332,
        5,40,0,0,332,92,1,0,0,0,333,334,5,41,0,0,334,94,1,0,0,0,335,336,
        5,123,0,0,336,96,1,0,0,0,337,338,5,125,0,0,338,98,1,0,0,0,339,340,
        5,91,0,0,340,100,1,0,0,0,341,342,5,93,0,0,342,102,1,0,0,0,343,344,
        5,44,0,0,344,104,1,0,0,0,345,346,5,59,0,0,346,106,1,0,0,0,347,351,
        7,0,0,0,348,350,7,1,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,
        1,0,0,0,351,352,1,0,0,0,352,108,1,0,0,0,353,351,1,0,0,0,354,363,
        5,48,0,0,355,359,7,2,0,0,356,358,7,3,0,0,357,356,1,0,0,0,358,361,
        1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,363,1,0,0,0,361,359,
        1,0,0,0,362,354,1,0,0,0,362,355,1,0,0,0,363,110,1,0,0,0,364,365,
        5,48,0,0,365,369,5,120,0,0,366,367,5,48,0,0,367,369,5,88,0,0,368,
        364,1,0,0,0,368,366,1,0,0,0,369,371,1,0,0,0,370,372,7,4,0,0,371,
        370,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,
        112,1,0,0,0,375,376,5,48,0,0,376,380,5,111,0,0,377,378,5,48,0,0,
        378,380,5,79,0,0,379,375,1,0,0,0,379,377,1,0,0,0,380,382,1,0,0,0,
        381,383,7,5,0,0,382,381,1,0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,
        384,385,1,0,0,0,385,114,1,0,0,0,386,387,5,48,0,0,387,391,5,98,0,
        0,388,389,5,48,0,0,389,391,5,66,0,0,390,386,1,0,0,0,390,388,1,0,
        0,0,391,393,1,0,0,0,392,394,7,6,0,0,393,392,1,0,0,0,394,395,1,0,
        0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,116,1,0,0,0,397,406,5,48,
        0,0,398,402,7,2,0,0,399,401,7,3,0,0,400,399,1,0,0,0,401,404,1,0,
        0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,406,1,0,0,0,404,402,1,0,
        0,0,405,397,1,0,0,0,405,398,1,0,0,0,406,118,1,0,0,0,407,411,5,46,
        0,0,408,410,7,3,0,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,
        0,0,411,412,1,0,0,0,412,120,1,0,0,0,413,411,1,0,0,0,414,416,7,7,
        0,0,415,417,7,8,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,426,1,0,
        0,0,418,427,5,48,0,0,419,423,7,2,0,0,420,422,7,3,0,0,421,420,1,0,
        0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,427,1,0,
        0,0,425,423,1,0,0,0,426,418,1,0,0,0,426,419,1,0,0,0,427,122,1,0,
        0,0,428,439,3,109,54,0,429,430,3,111,55,0,430,431,6,61,0,0,431,439,
        1,0,0,0,432,433,3,113,56,0,433,434,6,61,1,0,434,439,1,0,0,0,435,
        436,3,115,57,0,436,437,6,61,2,0,437,439,1,0,0,0,438,428,1,0,0,0,
        438,429,1,0,0,0,438,432,1,0,0,0,438,435,1,0,0,0,439,124,1,0,0,0,
        440,441,3,117,58,0,441,443,3,119,59,0,442,444,3,121,60,0,443,442,
        1,0,0,0,443,444,1,0,0,0,444,461,1,0,0,0,445,446,3,117,58,0,446,447,
        3,121,60,0,447,461,1,0,0,0,448,450,3,119,59,0,449,451,7,3,0,0,450,
        449,1,0,0,0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,
        455,1,0,0,0,454,456,3,121,60,0,455,454,1,0,0,0,455,456,1,0,0,0,456,
        461,1,0,0,0,457,458,3,117,58,0,458,459,3,119,59,0,459,461,1,0,0,
        0,460,440,1,0,0,0,460,445,1,0,0,0,460,448,1,0,0,0,460,457,1,0,0,
        0,461,126,1,0,0,0,462,463,7,9,0,0,463,128,1,0,0,0,464,468,8,10,0,
        0,465,466,5,92,0,0,466,468,3,127,63,0,467,464,1,0,0,0,467,465,1,
        0,0,0,468,130,1,0,0,0,469,473,5,34,0,0,470,472,3,129,64,0,471,470,
        1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,
        1,0,0,0,475,473,1,0,0,0,476,477,5,34,0,0,477,478,6,65,3,0,478,132,
        1,0,0,0,479,481,7,11,0,0,480,479,1,0,0,0,481,482,1,0,0,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,6,66,4,0,485,134,
        1,0,0,0,486,487,5,47,0,0,487,488,5,42,0,0,488,493,1,0,0,0,489,492,
        3,135,67,0,490,492,9,0,0,0,491,489,1,0,0,0,491,490,1,0,0,0,492,495,
        1,0,0,0,493,494,1,0,0,0,493,491,1,0,0,0,494,496,1,0,0,0,495,493,
        1,0,0,0,496,497,5,42,0,0,497,498,5,47,0,0,498,499,1,0,0,0,499,500,
        6,67,4,0,500,136,1,0,0,0,501,502,5,47,0,0,502,503,5,47,0,0,503,507,
        1,0,0,0,504,506,8,12,0,0,505,504,1,0,0,0,506,509,1,0,0,0,507,505,
        1,0,0,0,507,508,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,510,512,
        5,13,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,
        5,10,0,0,514,515,1,0,0,0,515,516,6,68,4,0,516,138,1,0,0,0,517,519,
        5,13,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,
        5,10,0,0,521,522,6,69,5,0,522,140,1,0,0,0,523,527,5,34,0,0,524,526,
        3,129,64,0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,
        1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,530,532,7,13,0,0,531,530,
        1,0,0,0,532,533,1,0,0,0,533,534,6,70,6,0,534,142,1,0,0,0,535,539,
        5,34,0,0,536,538,3,129,64,0,537,536,1,0,0,0,538,541,1,0,0,0,539,
        537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,
        543,5,92,0,0,543,547,8,9,0,0,544,546,3,129,64,0,545,544,1,0,0,0,
        546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,
        549,547,1,0,0,0,550,551,6,71,7,0,551,144,1,0,0,0,552,553,9,0,0,0,
        553,554,6,72,8,0,554,146,1,0,0,0,33,0,351,359,362,368,373,379,384,
        390,395,402,405,411,416,423,426,438,443,452,455,460,467,473,482,
        491,493,507,511,518,527,531,539,547,9,1,61,0,1,61,1,1,61,2,1,65,
        3,6,0,0,1,69,4,1,70,5,1,71,6,1,72,7
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    CONST = 14
    VAR = 15
    CONTINUE = 16
    BREAK = 17
    RANGE = 18
    NIL = 19
    TRUE = 20
    FALSE = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_OR_EQUAL = 30
    GREATER = 31
    GREATER_OR_EQUAL = 32
    AND = 33
    OR = 34
    NOT = 35
    ASSIGN = 36
    ADD_ASSIGN = 37
    SUB_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    COLON = 43
    SHORT_ASSIGN = 44
    UNDERSCORE = 45
    LP = 46
    RP = 47
    LB = 48
    RB = 49
    LSB = 50
    RSB = 51
    COMMA = 52
    SEMI = 53
    ID = 54
    INT_LIT = 55
    FLOAT_LIT = 56
    STRING_LIT = 57
    WS = 58
    BLOCK_COMMENT = 59
    LINE_COMMENT = 60
    NEWLINE = 61
    UNCLOSE_STRING = 62
    ILLEGAL_ESCAPE = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'votien'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "':'", "':='", "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "COLON", "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", 
            "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", "INT_LIT", "FLOAT_LIT", 
            "STRING_LIT", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "NEWLINE", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", 
                  "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", "RB", 
                  "LSB", "RSB", "COMMA", "SEMI", "ID", "DECIMAL", "HEX", 
                  "OCTAL", "BINARY", "FLOAT_DECIMAL", "DECIMAL_PART", "EXPONENT", 
                  "INT_LIT", "FLOAT_LIT", "ESC_CHAR", "STR_CHAR", "STRING_LIT", 
                  "WS", "BLOCK_COMMENT", "LINE_COMMENT", "NEWLINE", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text[1:]);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text[1:]);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.INT_LIT_action 
            actions[65] = self.STRING_LIT_action 
            actions[69] = self.NEWLINE_action 
            actions[70] = self.UNCLOSE_STRING_action 
            actions[71] = self.ILLEGAL_ESCAPE_action 
            actions[72] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.text = str(int(self.text,16)) 
     

        if actionIndex == 1:
             self.text = str(int(self.text,8)) 
     

        if actionIndex == 2:
             self.text = str(int(self.text,2)) 
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.text = "\n"
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
              #nếu có kí tự escape không hợp lệ (không phải \b, \r, \n, \t, \', \", \\)
                illegal_str = str(self.text)
                i = illegal_str.find('\\') #tìm vị trí xuất hiện đầu tiên của kí tự escape
                while i != -1 and illegal_str[i+1] in 'brnt\'"\\': #hợp lệ thì tìm tiếp
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            raise ErrorToken(self.text)
     



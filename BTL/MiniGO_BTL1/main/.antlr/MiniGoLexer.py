# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,545,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
        1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,
        1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,
        1,52,1,52,1,53,1,53,5,53,356,8,53,10,53,12,53,359,9,53,1,54,1,54,
        1,55,1,55,1,56,1,56,1,56,1,56,3,56,369,8,56,1,56,4,56,372,8,56,11,
        56,12,56,373,1,57,1,57,1,58,1,58,1,58,1,58,3,58,382,8,58,1,58,4,
        58,385,8,58,11,58,12,58,386,1,59,1,59,1,59,5,59,392,8,59,10,59,12,
        59,395,9,59,3,59,397,8,59,1,60,1,60,5,60,401,8,60,10,60,12,60,404,
        9,60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,412,8,62,1,62,4,62,415,8,
        62,11,62,12,62,416,1,63,1,63,3,63,421,8,63,1,63,4,63,424,8,63,11,
        63,12,63,425,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,438,8,64,1,65,1,65,1,65,3,65,443,8,65,1,65,3,65,446,8,65,1,65,
        1,65,3,65,450,8,65,1,65,1,65,1,65,3,65,455,8,65,1,66,1,66,1,67,1,
        67,1,67,3,67,462,8,67,1,68,1,68,5,68,466,8,68,10,68,12,68,469,9,
        68,1,68,1,68,1,68,1,69,4,69,475,8,69,11,69,12,69,476,1,69,1,69,1,
        70,3,70,482,8,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,5,71,492,
        8,71,10,71,12,71,495,9,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,5,72,
        504,8,72,10,72,12,72,507,9,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,
        5,73,516,8,73,10,73,12,73,519,9,73,1,73,3,73,522,8,73,1,73,1,73,
        1,74,1,74,5,74,528,8,74,10,74,12,74,531,9,74,1,74,1,74,1,74,5,74,
        536,8,74,10,74,12,74,539,9,74,1,74,1,74,1,75,1,75,1,75,1,505,0,76,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,0,111,0,
        113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,55,131,56,133,
        0,135,0,137,57,139,58,141,59,143,60,145,61,147,62,149,63,151,64,
        1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,49,57,1,0,48,49,2,0,69,69,
        101,101,2,0,43,43,45,45,7,0,34,34,39,39,92,92,98,98,110,110,114,
        114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,10,12,13,32,32,2,0,
        10,10,13,13,2,1,10,10,13,13,562,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
        0,0,0,0,107,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,137,1,0,0,0,0,
        139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,
        0,0,0,149,1,0,0,0,0,151,1,0,0,0,1,153,1,0,0,0,3,160,1,0,0,0,5,163,
        1,0,0,0,7,168,1,0,0,0,9,172,1,0,0,0,11,179,1,0,0,0,13,184,1,0,0,
        0,15,189,1,0,0,0,17,196,1,0,0,0,19,206,1,0,0,0,21,213,1,0,0,0,23,
        217,1,0,0,0,25,223,1,0,0,0,27,231,1,0,0,0,29,237,1,0,0,0,31,241,
        1,0,0,0,33,250,1,0,0,0,35,256,1,0,0,0,37,262,1,0,0,0,39,266,1,0,
        0,0,41,271,1,0,0,0,43,277,1,0,0,0,45,279,1,0,0,0,47,281,1,0,0,0,
        49,283,1,0,0,0,51,285,1,0,0,0,53,287,1,0,0,0,55,290,1,0,0,0,57,293,
        1,0,0,0,59,295,1,0,0,0,61,298,1,0,0,0,63,300,1,0,0,0,65,303,1,0,
        0,0,67,306,1,0,0,0,69,309,1,0,0,0,71,311,1,0,0,0,73,313,1,0,0,0,
        75,316,1,0,0,0,77,319,1,0,0,0,79,322,1,0,0,0,81,325,1,0,0,0,83,328,
        1,0,0,0,85,330,1,0,0,0,87,332,1,0,0,0,89,335,1,0,0,0,91,337,1,0,
        0,0,93,339,1,0,0,0,95,341,1,0,0,0,97,343,1,0,0,0,99,345,1,0,0,0,
        101,347,1,0,0,0,103,349,1,0,0,0,105,351,1,0,0,0,107,353,1,0,0,0,
        109,360,1,0,0,0,111,362,1,0,0,0,113,368,1,0,0,0,115,375,1,0,0,0,
        117,381,1,0,0,0,119,396,1,0,0,0,121,398,1,0,0,0,123,405,1,0,0,0,
        125,411,1,0,0,0,127,418,1,0,0,0,129,437,1,0,0,0,131,454,1,0,0,0,
        133,456,1,0,0,0,135,461,1,0,0,0,137,463,1,0,0,0,139,474,1,0,0,0,
        141,481,1,0,0,0,143,487,1,0,0,0,145,498,1,0,0,0,147,513,1,0,0,0,
        149,525,1,0,0,0,151,542,1,0,0,0,153,154,5,118,0,0,154,155,5,111,
        0,0,155,156,5,116,0,0,156,157,5,105,0,0,157,158,5,101,0,0,158,159,
        5,110,0,0,159,2,1,0,0,0,160,161,5,105,0,0,161,162,5,102,0,0,162,
        4,1,0,0,0,163,164,5,101,0,0,164,165,5,108,0,0,165,166,5,115,0,0,
        166,167,5,101,0,0,167,6,1,0,0,0,168,169,5,102,0,0,169,170,5,111,
        0,0,170,171,5,114,0,0,171,8,1,0,0,0,172,173,5,114,0,0,173,174,5,
        101,0,0,174,175,5,116,0,0,175,176,5,117,0,0,176,177,5,114,0,0,177,
        178,5,110,0,0,178,10,1,0,0,0,179,180,5,102,0,0,180,181,5,117,0,0,
        181,182,5,110,0,0,182,183,5,99,0,0,183,12,1,0,0,0,184,185,5,116,
        0,0,185,186,5,121,0,0,186,187,5,112,0,0,187,188,5,101,0,0,188,14,
        1,0,0,0,189,190,5,115,0,0,190,191,5,116,0,0,191,192,5,114,0,0,192,
        193,5,117,0,0,193,194,5,99,0,0,194,195,5,116,0,0,195,16,1,0,0,0,
        196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,116,0,0,199,200,5,
        101,0,0,200,201,5,114,0,0,201,202,5,102,0,0,202,203,5,97,0,0,203,
        204,5,99,0,0,204,205,5,101,0,0,205,18,1,0,0,0,206,207,5,115,0,0,
        207,208,5,116,0,0,208,209,5,114,0,0,209,210,5,105,0,0,210,211,5,
        110,0,0,211,212,5,103,0,0,212,20,1,0,0,0,213,214,5,105,0,0,214,215,
        5,110,0,0,215,216,5,116,0,0,216,22,1,0,0,0,217,218,5,102,0,0,218,
        219,5,108,0,0,219,220,5,111,0,0,220,221,5,97,0,0,221,222,5,116,0,
        0,222,24,1,0,0,0,223,224,5,98,0,0,224,225,5,111,0,0,225,226,5,111,
        0,0,226,227,5,108,0,0,227,228,5,101,0,0,228,229,5,97,0,0,229,230,
        5,110,0,0,230,26,1,0,0,0,231,232,5,99,0,0,232,233,5,111,0,0,233,
        234,5,110,0,0,234,235,5,115,0,0,235,236,5,116,0,0,236,28,1,0,0,0,
        237,238,5,118,0,0,238,239,5,97,0,0,239,240,5,114,0,0,240,30,1,0,
        0,0,241,242,5,99,0,0,242,243,5,111,0,0,243,244,5,110,0,0,244,245,
        5,116,0,0,245,246,5,105,0,0,246,247,5,110,0,0,247,248,5,117,0,0,
        248,249,5,101,0,0,249,32,1,0,0,0,250,251,5,98,0,0,251,252,5,114,
        0,0,252,253,5,101,0,0,253,254,5,97,0,0,254,255,5,107,0,0,255,34,
        1,0,0,0,256,257,5,114,0,0,257,258,5,97,0,0,258,259,5,110,0,0,259,
        260,5,103,0,0,260,261,5,101,0,0,261,36,1,0,0,0,262,263,5,110,0,0,
        263,264,5,105,0,0,264,265,5,108,0,0,265,38,1,0,0,0,266,267,5,116,
        0,0,267,268,5,114,0,0,268,269,5,117,0,0,269,270,5,101,0,0,270,40,
        1,0,0,0,271,272,5,102,0,0,272,273,5,97,0,0,273,274,5,108,0,0,274,
        275,5,115,0,0,275,276,5,101,0,0,276,42,1,0,0,0,277,278,5,43,0,0,
        278,44,1,0,0,0,279,280,5,45,0,0,280,46,1,0,0,0,281,282,5,42,0,0,
        282,48,1,0,0,0,283,284,5,47,0,0,284,50,1,0,0,0,285,286,5,37,0,0,
        286,52,1,0,0,0,287,288,5,61,0,0,288,289,5,61,0,0,289,54,1,0,0,0,
        290,291,5,33,0,0,291,292,5,61,0,0,292,56,1,0,0,0,293,294,5,60,0,
        0,294,58,1,0,0,0,295,296,5,60,0,0,296,297,5,61,0,0,297,60,1,0,0,
        0,298,299,5,62,0,0,299,62,1,0,0,0,300,301,5,62,0,0,301,302,5,61,
        0,0,302,64,1,0,0,0,303,304,5,38,0,0,304,305,5,38,0,0,305,66,1,0,
        0,0,306,307,5,124,0,0,307,308,5,124,0,0,308,68,1,0,0,0,309,310,5,
        33,0,0,310,70,1,0,0,0,311,312,5,61,0,0,312,72,1,0,0,0,313,314,5,
        43,0,0,314,315,5,61,0,0,315,74,1,0,0,0,316,317,5,45,0,0,317,318,
        5,61,0,0,318,76,1,0,0,0,319,320,5,42,0,0,320,321,5,61,0,0,321,78,
        1,0,0,0,322,323,5,47,0,0,323,324,5,61,0,0,324,80,1,0,0,0,325,326,
        5,37,0,0,326,327,5,61,0,0,327,82,1,0,0,0,328,329,5,46,0,0,329,84,
        1,0,0,0,330,331,5,58,0,0,331,86,1,0,0,0,332,333,5,58,0,0,333,334,
        5,61,0,0,334,88,1,0,0,0,335,336,5,95,0,0,336,90,1,0,0,0,337,338,
        5,40,0,0,338,92,1,0,0,0,339,340,5,41,0,0,340,94,1,0,0,0,341,342,
        5,123,0,0,342,96,1,0,0,0,343,344,5,125,0,0,344,98,1,0,0,0,345,346,
        5,91,0,0,346,100,1,0,0,0,347,348,5,93,0,0,348,102,1,0,0,0,349,350,
        5,44,0,0,350,104,1,0,0,0,351,352,5,59,0,0,352,106,1,0,0,0,353,357,
        7,0,0,0,354,356,7,1,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,
        1,0,0,0,357,358,1,0,0,0,358,108,1,0,0,0,359,357,1,0,0,0,360,361,
        7,2,0,0,361,110,1,0,0,0,362,363,7,3,0,0,363,112,1,0,0,0,364,365,
        5,48,0,0,365,369,5,111,0,0,366,367,5,48,0,0,367,369,5,79,0,0,368,
        364,1,0,0,0,368,366,1,0,0,0,369,371,1,0,0,0,370,372,7,3,0,0,371,
        370,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,
        114,1,0,0,0,375,376,7,4,0,0,376,116,1,0,0,0,377,378,5,48,0,0,378,
        382,5,120,0,0,379,380,5,48,0,0,380,382,5,88,0,0,381,377,1,0,0,0,
        381,379,1,0,0,0,382,384,1,0,0,0,383,385,7,4,0,0,384,383,1,0,0,0,
        385,386,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,118,1,0,0,0,
        388,397,5,48,0,0,389,393,7,5,0,0,390,392,7,2,0,0,391,390,1,0,0,0,
        392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,0,
        395,393,1,0,0,0,396,388,1,0,0,0,396,389,1,0,0,0,397,120,1,0,0,0,
        398,402,5,46,0,0,399,401,7,2,0,0,400,399,1,0,0,0,401,404,1,0,0,0,
        402,400,1,0,0,0,402,403,1,0,0,0,403,122,1,0,0,0,404,402,1,0,0,0,
        405,406,7,6,0,0,406,124,1,0,0,0,407,408,5,48,0,0,408,412,5,98,0,
        0,409,410,5,48,0,0,410,412,5,66,0,0,411,407,1,0,0,0,411,409,1,0,
        0,0,412,414,1,0,0,0,413,415,7,6,0,0,414,413,1,0,0,0,415,416,1,0,
        0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,126,1,0,0,0,418,420,7,7,
        0,0,419,421,7,8,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,423,1,0,
        0,0,422,424,7,2,0,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,
        0,0,425,426,1,0,0,0,426,128,1,0,0,0,427,438,3,119,59,0,428,429,3,
        117,58,0,429,430,6,64,0,0,430,438,1,0,0,0,431,432,3,113,56,0,432,
        433,6,64,1,0,433,438,1,0,0,0,434,435,3,125,62,0,435,436,6,64,2,0,
        436,438,1,0,0,0,437,427,1,0,0,0,437,428,1,0,0,0,437,431,1,0,0,0,
        437,434,1,0,0,0,438,130,1,0,0,0,439,440,3,119,59,0,440,442,3,121,
        60,0,441,443,3,127,63,0,442,441,1,0,0,0,442,443,1,0,0,0,443,455,
        1,0,0,0,444,446,3,119,59,0,445,444,1,0,0,0,445,446,1,0,0,0,446,447,
        1,0,0,0,447,449,3,121,60,0,448,450,3,127,63,0,449,448,1,0,0,0,449,
        450,1,0,0,0,450,455,1,0,0,0,451,452,3,119,59,0,452,453,3,127,63,
        0,453,455,1,0,0,0,454,439,1,0,0,0,454,445,1,0,0,0,454,451,1,0,0,
        0,455,132,1,0,0,0,456,457,7,9,0,0,457,134,1,0,0,0,458,462,8,10,0,
        0,459,460,5,92,0,0,460,462,3,133,66,0,461,458,1,0,0,0,461,459,1,
        0,0,0,462,136,1,0,0,0,463,467,5,34,0,0,464,466,3,135,67,0,465,464,
        1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,
        1,0,0,0,469,467,1,0,0,0,470,471,5,34,0,0,471,472,6,68,3,0,472,138,
        1,0,0,0,473,475,7,11,0,0,474,473,1,0,0,0,475,476,1,0,0,0,476,474,
        1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,479,6,69,4,0,479,140,
        1,0,0,0,480,482,5,13,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,
        1,0,0,0,483,484,5,10,0,0,484,485,1,0,0,0,485,486,6,70,4,0,486,142,
        1,0,0,0,487,488,5,47,0,0,488,489,5,47,0,0,489,493,1,0,0,0,490,492,
        8,12,0,0,491,490,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,496,497,6,71,4,0,497,144,
        1,0,0,0,498,499,5,47,0,0,499,500,5,42,0,0,500,505,1,0,0,0,501,504,
        3,145,72,0,502,504,9,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,507,
        1,0,0,0,505,506,1,0,0,0,505,503,1,0,0,0,506,508,1,0,0,0,507,505,
        1,0,0,0,508,509,5,42,0,0,509,510,5,47,0,0,510,511,1,0,0,0,511,512,
        6,72,4,0,512,146,1,0,0,0,513,517,5,34,0,0,514,516,3,135,67,0,515,
        514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,
        521,1,0,0,0,519,517,1,0,0,0,520,522,7,13,0,0,521,520,1,0,0,0,522,
        523,1,0,0,0,523,524,6,73,5,0,524,148,1,0,0,0,525,529,5,34,0,0,526,
        528,3,135,67,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,
        530,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,533,5,92,0,0,533,
        537,8,9,0,0,534,536,3,135,67,0,535,534,1,0,0,0,536,539,1,0,0,0,537,
        535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,537,1,0,0,0,540,
        541,6,74,6,0,541,150,1,0,0,0,542,543,9,0,0,0,543,544,6,75,7,0,544,
        152,1,0,0,0,29,0,357,368,373,381,386,393,396,402,411,416,420,425,
        437,442,445,449,454,461,467,476,481,493,503,505,517,521,529,537,
        8,1,64,0,1,64,1,1,64,2,1,68,3,6,0,0,1,73,4,1,74,5,1,75,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    CONST = 14
    VAR = 15
    CONTINUE = 16
    BREAK = 17
    RANGE = 18
    NIL = 19
    TRUE = 20
    FALSE = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_OR_EQUAL = 30
    GREATER = 31
    GREATER_OR_EQUAL = 32
    AND = 33
    OR = 34
    NOT = 35
    ASSIGN = 36
    ADD_ASSIGN = 37
    SUB_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    COLON = 43
    SHORT_ASSIGN = 44
    UNDERSCORE = 45
    LP = 46
    RP = 47
    LB = 48
    RB = 49
    LSB = 50
    RSB = 51
    COMMA = 52
    SEMI = 53
    ID = 54
    INT_LIT = 55
    FLOAT_LIT = 56
    STRING_LIT = 57
    WS = 58
    NEWLINE = 59
    LINE_COMMENT = 60
    BLOCK_COMMENT = 61
    UNCLOSE_STRING = 62
    ILLEGAL_ESCAPE = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'votien'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "':'", "':='", "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "COLON", "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", 
            "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", "INT_LIT", "FLOAT_LIT", 
            "STRING_LIT", "WS", "NEWLINE", "LINE_COMMENT", "BLOCK_COMMENT", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", 
                  "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", "RB", 
                  "LSB", "RSB", "COMMA", "SEMI", "ID", "DIGIT", "OCTAL_DIGIT", 
                  "OCTAL", "HEX_DIGIT", "HEX", "DECIMAL", "DECIMAL_PART", 
                  "BINARY_DIGIT", "BINARY", "EXPONENT", "INT_LIT", "FLOAT_LIT", 
                  "ESC_CHAR", "STR_CHAR", "STRING_LIT", "WS", "NEWLINE", 
                  "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text[1:]);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text[1:]);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[64] = self.INT_LIT_action 
            actions[68] = self.STRING_LIT_action 
            actions[73] = self.UNCLOSE_STRING_action 
            actions[74] = self.ILLEGAL_ESCAPE_action 
            actions[75] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.text = str(int(self.text,16)) 
     

        if actionIndex == 1:
             self.text = str(int(self.text,8)) 
     

        if actionIndex == 2:
             self.text = str(int(self.text,2)) 
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
              #nếu có kí tự escape không hợp lệ (không phải \b, \r, \n, \t, \', \", \\)
                illegal_str = str(self.text)
                i = illegal_str.find('\\') #tìm vị trí xuất hiện đầu tiên của kí tự escape
                while i != -1 and illegal_str[i+1] in 'brnt\'"\\': #hợp lệ thì tìm tiếp
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            raise ErrorToken(self.text)
     



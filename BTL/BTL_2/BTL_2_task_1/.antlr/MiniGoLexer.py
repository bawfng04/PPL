# Generated from d:/Projects/PPL-Assignment/BTL/src/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,63,501,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
        1,52,5,52,339,8,52,10,52,12,52,342,9,52,1,53,1,53,1,53,5,53,347,
        8,53,10,53,12,53,350,9,53,3,53,352,8,53,1,54,1,54,1,54,1,54,3,54,
        358,8,54,1,54,4,54,361,8,54,11,54,12,54,362,1,55,1,55,1,55,1,55,
        3,55,369,8,55,1,55,4,55,372,8,55,11,55,12,55,373,1,56,1,56,1,56,
        1,56,3,56,380,8,56,1,56,4,56,383,8,56,11,56,12,56,384,1,57,4,57,
        388,8,57,11,57,12,57,389,1,58,1,58,3,58,394,8,58,1,58,1,58,1,59,
        1,59,1,59,5,59,401,8,59,10,59,12,59,404,9,59,1,59,3,59,407,8,59,
        1,60,1,60,1,60,1,60,3,60,413,8,60,1,61,1,61,1,62,1,62,1,62,3,62,
        420,8,62,1,63,1,63,5,63,424,8,63,10,63,12,63,427,9,63,1,63,1,63,
        1,64,3,64,432,8,64,1,64,1,64,1,64,1,65,4,65,438,8,65,11,65,12,65,
        439,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,449,8,66,10,66,12,66,
        452,9,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,463,8,
        67,10,67,12,67,466,9,67,1,67,1,67,1,68,1,68,5,68,472,8,68,10,68,
        12,68,475,9,68,1,68,3,68,478,8,68,1,68,1,68,1,69,1,69,5,69,484,8,
        69,10,69,12,69,487,9,69,1,69,1,69,1,69,5,69,492,8,69,10,69,12,69,
        495,9,69,1,69,1,69,1,70,1,70,1,70,1,450,0,71,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
        50,101,51,103,52,105,53,107,0,109,0,111,0,113,0,115,0,117,0,119,
        54,121,55,123,0,125,0,127,56,129,57,131,58,133,59,135,60,137,61,
        139,62,141,63,1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,49,57,1,0,48,57,3,0,48,57,65,70,97,102,1,0,48,55,1,0,
        48,49,2,0,69,69,101,101,2,0,43,43,45,45,5,0,34,34,92,92,110,110,
        114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,9,12,13,32,32,
        2,0,10,10,13,13,2,1,10,10,13,13,518,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,
        0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,
        0,0,0,0,141,1,0,0,0,1,143,1,0,0,0,3,146,1,0,0,0,5,151,1,0,0,0,7,
        155,1,0,0,0,9,162,1,0,0,0,11,167,1,0,0,0,13,172,1,0,0,0,15,179,1,
        0,0,0,17,189,1,0,0,0,19,196,1,0,0,0,21,200,1,0,0,0,23,206,1,0,0,
        0,25,214,1,0,0,0,27,220,1,0,0,0,29,224,1,0,0,0,31,233,1,0,0,0,33,
        239,1,0,0,0,35,245,1,0,0,0,37,249,1,0,0,0,39,254,1,0,0,0,41,260,
        1,0,0,0,43,262,1,0,0,0,45,264,1,0,0,0,47,266,1,0,0,0,49,268,1,0,
        0,0,51,270,1,0,0,0,53,273,1,0,0,0,55,276,1,0,0,0,57,278,1,0,0,0,
        59,281,1,0,0,0,61,283,1,0,0,0,63,286,1,0,0,0,65,289,1,0,0,0,67,292,
        1,0,0,0,69,294,1,0,0,0,71,296,1,0,0,0,73,299,1,0,0,0,75,302,1,0,
        0,0,77,305,1,0,0,0,79,308,1,0,0,0,81,311,1,0,0,0,83,313,1,0,0,0,
        85,315,1,0,0,0,87,318,1,0,0,0,89,320,1,0,0,0,91,322,1,0,0,0,93,324,
        1,0,0,0,95,326,1,0,0,0,97,328,1,0,0,0,99,330,1,0,0,0,101,332,1,0,
        0,0,103,334,1,0,0,0,105,336,1,0,0,0,107,351,1,0,0,0,109,357,1,0,
        0,0,111,368,1,0,0,0,113,379,1,0,0,0,115,387,1,0,0,0,117,391,1,0,
        0,0,119,397,1,0,0,0,121,412,1,0,0,0,123,414,1,0,0,0,125,419,1,0,
        0,0,127,421,1,0,0,0,129,431,1,0,0,0,131,437,1,0,0,0,133,443,1,0,
        0,0,135,458,1,0,0,0,137,469,1,0,0,0,139,481,1,0,0,0,141,498,1,0,
        0,0,143,144,5,105,0,0,144,145,5,102,0,0,145,2,1,0,0,0,146,147,5,
        101,0,0,147,148,5,108,0,0,148,149,5,115,0,0,149,150,5,101,0,0,150,
        4,1,0,0,0,151,152,5,102,0,0,152,153,5,111,0,0,153,154,5,114,0,0,
        154,6,1,0,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,116,
        0,0,158,159,5,117,0,0,159,160,5,114,0,0,160,161,5,110,0,0,161,8,
        1,0,0,0,162,163,5,102,0,0,163,164,5,117,0,0,164,165,5,110,0,0,165,
        166,5,99,0,0,166,10,1,0,0,0,167,168,5,116,0,0,168,169,5,121,0,0,
        169,170,5,112,0,0,170,171,5,101,0,0,171,12,1,0,0,0,172,173,5,115,
        0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,117,0,0,176,177,
        5,99,0,0,177,178,5,116,0,0,178,14,1,0,0,0,179,180,5,105,0,0,180,
        181,5,110,0,0,181,182,5,116,0,0,182,183,5,101,0,0,183,184,5,114,
        0,0,184,185,5,102,0,0,185,186,5,97,0,0,186,187,5,99,0,0,187,188,
        5,101,0,0,188,16,1,0,0,0,189,190,5,115,0,0,190,191,5,116,0,0,191,
        192,5,114,0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,103,
        0,0,195,18,1,0,0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,
        116,0,0,199,20,1,0,0,0,200,201,5,102,0,0,201,202,5,108,0,0,202,203,
        5,111,0,0,203,204,5,97,0,0,204,205,5,116,0,0,205,22,1,0,0,0,206,
        207,5,98,0,0,207,208,5,111,0,0,208,209,5,111,0,0,209,210,5,108,0,
        0,210,211,5,101,0,0,211,212,5,97,0,0,212,213,5,110,0,0,213,24,1,
        0,0,0,214,215,5,99,0,0,215,216,5,111,0,0,216,217,5,110,0,0,217,218,
        5,115,0,0,218,219,5,116,0,0,219,26,1,0,0,0,220,221,5,118,0,0,221,
        222,5,97,0,0,222,223,5,114,0,0,223,28,1,0,0,0,224,225,5,99,0,0,225,
        226,5,111,0,0,226,227,5,110,0,0,227,228,5,116,0,0,228,229,5,105,
        0,0,229,230,5,110,0,0,230,231,5,117,0,0,231,232,5,101,0,0,232,30,
        1,0,0,0,233,234,5,98,0,0,234,235,5,114,0,0,235,236,5,101,0,0,236,
        237,5,97,0,0,237,238,5,107,0,0,238,32,1,0,0,0,239,240,5,114,0,0,
        240,241,5,97,0,0,241,242,5,110,0,0,242,243,5,103,0,0,243,244,5,101,
        0,0,244,34,1,0,0,0,245,246,5,110,0,0,246,247,5,105,0,0,247,248,5,
        108,0,0,248,36,1,0,0,0,249,250,5,116,0,0,250,251,5,114,0,0,251,252,
        5,117,0,0,252,253,5,101,0,0,253,38,1,0,0,0,254,255,5,102,0,0,255,
        256,5,97,0,0,256,257,5,108,0,0,257,258,5,115,0,0,258,259,5,101,0,
        0,259,40,1,0,0,0,260,261,5,43,0,0,261,42,1,0,0,0,262,263,5,45,0,
        0,263,44,1,0,0,0,264,265,5,42,0,0,265,46,1,0,0,0,266,267,5,47,0,
        0,267,48,1,0,0,0,268,269,5,37,0,0,269,50,1,0,0,0,270,271,5,61,0,
        0,271,272,5,61,0,0,272,52,1,0,0,0,273,274,5,33,0,0,274,275,5,61,
        0,0,275,54,1,0,0,0,276,277,5,60,0,0,277,56,1,0,0,0,278,279,5,60,
        0,0,279,280,5,61,0,0,280,58,1,0,0,0,281,282,5,62,0,0,282,60,1,0,
        0,0,283,284,5,62,0,0,284,285,5,61,0,0,285,62,1,0,0,0,286,287,5,38,
        0,0,287,288,5,38,0,0,288,64,1,0,0,0,289,290,5,124,0,0,290,291,5,
        124,0,0,291,66,1,0,0,0,292,293,5,33,0,0,293,68,1,0,0,0,294,295,5,
        61,0,0,295,70,1,0,0,0,296,297,5,43,0,0,297,298,5,61,0,0,298,72,1,
        0,0,0,299,300,5,45,0,0,300,301,5,61,0,0,301,74,1,0,0,0,302,303,5,
        42,0,0,303,304,5,61,0,0,304,76,1,0,0,0,305,306,5,47,0,0,306,307,
        5,61,0,0,307,78,1,0,0,0,308,309,5,37,0,0,309,310,5,61,0,0,310,80,
        1,0,0,0,311,312,5,46,0,0,312,82,1,0,0,0,313,314,5,58,0,0,314,84,
        1,0,0,0,315,316,5,58,0,0,316,317,5,61,0,0,317,86,1,0,0,0,318,319,
        5,95,0,0,319,88,1,0,0,0,320,321,5,40,0,0,321,90,1,0,0,0,322,323,
        5,41,0,0,323,92,1,0,0,0,324,325,5,123,0,0,325,94,1,0,0,0,326,327,
        5,125,0,0,327,96,1,0,0,0,328,329,5,91,0,0,329,98,1,0,0,0,330,331,
        5,93,0,0,331,100,1,0,0,0,332,333,5,44,0,0,333,102,1,0,0,0,334,335,
        5,59,0,0,335,104,1,0,0,0,336,340,7,0,0,0,337,339,7,1,0,0,338,337,
        1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,106,
        1,0,0,0,342,340,1,0,0,0,343,352,5,48,0,0,344,348,7,2,0,0,345,347,
        7,3,0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,
        1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,351,343,1,0,0,0,351,344,
        1,0,0,0,352,108,1,0,0,0,353,354,5,48,0,0,354,358,5,120,0,0,355,356,
        5,48,0,0,356,358,5,88,0,0,357,353,1,0,0,0,357,355,1,0,0,0,358,360,
        1,0,0,0,359,361,7,4,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,
        1,0,0,0,362,363,1,0,0,0,363,110,1,0,0,0,364,365,5,48,0,0,365,369,
        5,111,0,0,366,367,5,48,0,0,367,369,5,79,0,0,368,364,1,0,0,0,368,
        366,1,0,0,0,369,371,1,0,0,0,370,372,7,5,0,0,371,370,1,0,0,0,372,
        373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,112,1,0,0,0,375,
        376,5,48,0,0,376,380,5,98,0,0,377,378,5,48,0,0,378,380,5,66,0,0,
        379,375,1,0,0,0,379,377,1,0,0,0,380,382,1,0,0,0,381,383,7,6,0,0,
        382,381,1,0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,
        385,114,1,0,0,0,386,388,7,3,0,0,387,386,1,0,0,0,388,389,1,0,0,0,
        389,387,1,0,0,0,389,390,1,0,0,0,390,116,1,0,0,0,391,393,7,7,0,0,
        392,394,7,8,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,
        395,396,3,115,57,0,396,118,1,0,0,0,397,398,3,115,57,0,398,402,5,
        46,0,0,399,401,7,3,0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,
        0,0,0,402,403,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,405,407,3,
        117,58,0,406,405,1,0,0,0,406,407,1,0,0,0,407,120,1,0,0,0,408,413,
        3,107,53,0,409,413,3,109,54,0,410,413,3,111,55,0,411,413,3,113,56,
        0,412,408,1,0,0,0,412,409,1,0,0,0,412,410,1,0,0,0,412,411,1,0,0,
        0,413,122,1,0,0,0,414,415,7,9,0,0,415,124,1,0,0,0,416,420,8,10,0,
        0,417,418,5,92,0,0,418,420,3,123,61,0,419,416,1,0,0,0,419,417,1,
        0,0,0,420,126,1,0,0,0,421,425,5,34,0,0,422,424,3,125,62,0,423,422,
        1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,
        1,0,0,0,427,425,1,0,0,0,428,429,5,34,0,0,429,128,1,0,0,0,430,432,
        5,13,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,
        5,10,0,0,434,435,6,64,0,0,435,130,1,0,0,0,436,438,7,11,0,0,437,436,
        1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,441,
        1,0,0,0,441,442,6,65,1,0,442,132,1,0,0,0,443,444,5,47,0,0,444,445,
        5,42,0,0,445,450,1,0,0,0,446,449,3,133,66,0,447,449,9,0,0,0,448,
        446,1,0,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,451,1,0,0,0,450,
        448,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,5,42,0,0,454,
        455,5,47,0,0,455,456,1,0,0,0,456,457,6,66,1,0,457,134,1,0,0,0,458,
        459,5,47,0,0,459,460,5,47,0,0,460,464,1,0,0,0,461,463,8,12,0,0,462,
        461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,
        467,1,0,0,0,466,464,1,0,0,0,467,468,6,67,1,0,468,136,1,0,0,0,469,
        473,5,34,0,0,470,472,3,125,62,0,471,470,1,0,0,0,472,475,1,0,0,0,
        473,471,1,0,0,0,473,474,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,
        476,478,7,13,0,0,477,476,1,0,0,0,478,479,1,0,0,0,479,480,6,68,2,
        0,480,138,1,0,0,0,481,485,5,34,0,0,482,484,3,125,62,0,483,482,1,
        0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,
        0,0,0,487,485,1,0,0,0,488,489,5,92,0,0,489,493,8,9,0,0,490,492,3,
        125,62,0,491,490,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,496,497,6,69,3,0,497,140,
        1,0,0,0,498,499,9,0,0,0,499,500,6,70,4,0,500,142,1,0,0,0,26,0,340,
        348,351,357,362,368,373,379,384,389,393,402,406,412,419,425,431,
        439,448,450,464,473,477,485,493,5,1,64,0,6,0,0,1,68,1,1,69,2,1,70,
        3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQUAL = 26
    NOT_EQUAL = 27
    LESS = 28
    LESS_OR_EQUAL = 29
    GREATER = 30
    GREATER_OR_EQUAL = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ADD_ASSIGN = 36
    SUB_ASSIGN = 37
    MUL_ASSIGN = 38
    DIV_ASSIGN = 39
    MOD_ASSIGN = 40
    DOT = 41
    COLON = 42
    SHORT_ASSIGN = 43
    UNDERSCORE = 44
    LP = 45
    RP = 46
    LB = 47
    RB = 48
    LSB = 49
    RSB = 50
    COMMA = 51
    SEMI = 52
    ID = 53
    FLOAT_LIT = 54
    INT_LIT = 55
    STRING_LIT = 56
    NEWLINE = 57
    WS = 58
    BLOCK_COMMENT = 59
    LINE_COMMENT = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62
    ERROR_CHAR = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "':'", 
            "':='", "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
            "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "COLON", "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", 
            "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", "FLOAT_LIT", "INT_LIT", 
            "STRING_LIT", "NEWLINE", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", 
                  "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", "RB", 
                  "LSB", "RSB", "COMMA", "SEMI", "ID", "DECIMAL", "HEX", 
                  "OCTAL", "BINARY", "FLOAT_DECIMAL", "EXPONENT", "FLOAT_LIT", 
                  "INT_LIT", "ESC_CHAR", "STR_CHAR", "STRING_LIT", "NEWLINE", 
                  "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.preType = None

    def emit(self):
        tk = self.type
        self.preType = tk;
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[64] = self.NEWLINE_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            actions[70] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                    if self.preType in [self.ID, self.INT_LIT, self.FLOAT_LIT, self.STRING_LIT,
                                       self.TRUE, self.FALSE, self.NIL,
                                       self.RETURN, self.CONTINUE, self.BREAK,
                                       self.RP, self.RB, self.RSB
            						   ]:
                        self.text = ';'
                    else:
                        self.skip()
                
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = '\"' + self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = '\"' + self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                    illegal_str = self.text[1:] # Remove leading quote
                    result = '"' + illegal_str # Reconstruct with leading quote
                    raise IllegalEscape(result)
                
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     



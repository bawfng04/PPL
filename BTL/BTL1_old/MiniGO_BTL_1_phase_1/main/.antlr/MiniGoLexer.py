# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL1/main/173_task1.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,60,527,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
        1,50,1,50,5,50,341,8,50,10,50,12,50,344,9,50,1,51,1,51,1,52,1,52,
        1,53,1,53,1,53,1,53,3,53,354,8,53,1,53,4,53,357,8,53,11,53,12,53,
        358,1,54,1,54,1,55,1,55,1,55,1,55,3,55,367,8,55,1,55,4,55,370,8,
        55,11,55,12,55,371,1,56,1,56,1,56,5,56,377,8,56,10,56,12,56,380,
        9,56,3,56,382,8,56,1,57,1,57,5,57,386,8,57,10,57,12,57,389,9,57,
        1,58,1,58,1,59,1,59,1,59,1,59,3,59,397,8,59,1,59,4,59,400,8,59,11,
        59,12,59,401,1,60,1,60,3,60,406,8,60,1,60,4,60,409,8,60,11,60,12,
        60,410,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,423,
        8,61,1,62,4,62,426,8,62,11,62,12,62,427,1,62,1,62,3,62,432,8,62,
        1,62,1,62,3,62,436,8,62,1,62,4,62,439,8,62,11,62,12,62,440,1,62,
        3,62,444,8,62,1,63,1,63,1,64,1,64,1,64,3,64,451,8,64,1,65,1,65,5,
        65,455,8,65,10,65,12,65,458,9,65,1,65,1,65,1,65,1,66,4,66,464,8,
        66,11,66,12,66,465,1,66,1,66,1,67,1,67,1,67,1,67,5,67,474,8,67,10,
        67,12,67,477,9,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,486,8,
        68,10,68,12,68,489,9,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,5,69,
        498,8,69,10,69,12,69,501,9,69,1,69,3,69,504,8,69,1,69,1,69,1,70,
        1,70,5,70,510,8,70,10,70,12,70,513,9,70,1,70,1,70,1,70,5,70,518,
        8,70,10,70,12,70,521,9,70,1,70,1,70,1,71,1,71,1,71,1,487,0,72,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,97,49,99,50,101,51,103,0,105,0,107,0,109,0,111,0,113,0,
        115,0,117,0,119,0,121,0,123,52,125,53,127,0,129,0,131,54,133,55,
        135,56,137,57,139,58,141,59,143,60,1,0,14,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,55,3,0,48,57,65,70,
        97,102,1,0,49,57,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,7,0,
        34,34,39,39,92,92,98,98,110,110,114,114,116,116,4,0,10,10,13,13,
        34,34,92,92,3,0,9,10,12,13,32,32,2,0,10,10,13,13,2,1,10,10,13,13,
        544,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,131,1,0,0,0,0,133,1,
        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
        143,1,0,0,0,1,145,1,0,0,0,3,152,1,0,0,0,5,155,1,0,0,0,7,160,1,0,
        0,0,9,164,1,0,0,0,11,171,1,0,0,0,13,176,1,0,0,0,15,181,1,0,0,0,17,
        188,1,0,0,0,19,198,1,0,0,0,21,205,1,0,0,0,23,209,1,0,0,0,25,215,
        1,0,0,0,27,223,1,0,0,0,29,229,1,0,0,0,31,233,1,0,0,0,33,242,1,0,
        0,0,35,248,1,0,0,0,37,254,1,0,0,0,39,258,1,0,0,0,41,263,1,0,0,0,
        43,269,1,0,0,0,45,271,1,0,0,0,47,273,1,0,0,0,49,275,1,0,0,0,51,277,
        1,0,0,0,53,279,1,0,0,0,55,282,1,0,0,0,57,285,1,0,0,0,59,287,1,0,
        0,0,61,290,1,0,0,0,63,292,1,0,0,0,65,295,1,0,0,0,67,298,1,0,0,0,
        69,301,1,0,0,0,71,303,1,0,0,0,73,305,1,0,0,0,75,308,1,0,0,0,77,311,
        1,0,0,0,79,314,1,0,0,0,81,317,1,0,0,0,83,320,1,0,0,0,85,322,1,0,
        0,0,87,324,1,0,0,0,89,326,1,0,0,0,91,328,1,0,0,0,93,330,1,0,0,0,
        95,332,1,0,0,0,97,334,1,0,0,0,99,336,1,0,0,0,101,338,1,0,0,0,103,
        345,1,0,0,0,105,347,1,0,0,0,107,353,1,0,0,0,109,360,1,0,0,0,111,
        366,1,0,0,0,113,381,1,0,0,0,115,383,1,0,0,0,117,390,1,0,0,0,119,
        396,1,0,0,0,121,403,1,0,0,0,123,422,1,0,0,0,125,443,1,0,0,0,127,
        445,1,0,0,0,129,450,1,0,0,0,131,452,1,0,0,0,133,463,1,0,0,0,135,
        469,1,0,0,0,137,480,1,0,0,0,139,495,1,0,0,0,141,507,1,0,0,0,143,
        524,1,0,0,0,145,146,5,118,0,0,146,147,5,111,0,0,147,148,5,116,0,
        0,148,149,5,105,0,0,149,150,5,101,0,0,150,151,5,110,0,0,151,2,1,
        0,0,0,152,153,5,105,0,0,153,154,5,102,0,0,154,4,1,0,0,0,155,156,
        5,101,0,0,156,157,5,108,0,0,157,158,5,115,0,0,158,159,5,101,0,0,
        159,6,1,0,0,0,160,161,5,102,0,0,161,162,5,111,0,0,162,163,5,114,
        0,0,163,8,1,0,0,0,164,165,5,114,0,0,165,166,5,101,0,0,166,167,5,
        116,0,0,167,168,5,117,0,0,168,169,5,114,0,0,169,170,5,110,0,0,170,
        10,1,0,0,0,171,172,5,102,0,0,172,173,5,117,0,0,173,174,5,110,0,0,
        174,175,5,99,0,0,175,12,1,0,0,0,176,177,5,116,0,0,177,178,5,121,
        0,0,178,179,5,112,0,0,179,180,5,101,0,0,180,14,1,0,0,0,181,182,5,
        115,0,0,182,183,5,116,0,0,183,184,5,114,0,0,184,185,5,117,0,0,185,
        186,5,99,0,0,186,187,5,116,0,0,187,16,1,0,0,0,188,189,5,105,0,0,
        189,190,5,110,0,0,190,191,5,116,0,0,191,192,5,101,0,0,192,193,5,
        114,0,0,193,194,5,102,0,0,194,195,5,97,0,0,195,196,5,99,0,0,196,
        197,5,101,0,0,197,18,1,0,0,0,198,199,5,115,0,0,199,200,5,116,0,0,
        200,201,5,114,0,0,201,202,5,105,0,0,202,203,5,110,0,0,203,204,5,
        103,0,0,204,20,1,0,0,0,205,206,5,105,0,0,206,207,5,110,0,0,207,208,
        5,116,0,0,208,22,1,0,0,0,209,210,5,102,0,0,210,211,5,108,0,0,211,
        212,5,111,0,0,212,213,5,97,0,0,213,214,5,116,0,0,214,24,1,0,0,0,
        215,216,5,98,0,0,216,217,5,111,0,0,217,218,5,111,0,0,218,219,5,108,
        0,0,219,220,5,101,0,0,220,221,5,97,0,0,221,222,5,110,0,0,222,26,
        1,0,0,0,223,224,5,99,0,0,224,225,5,111,0,0,225,226,5,110,0,0,226,
        227,5,115,0,0,227,228,5,116,0,0,228,28,1,0,0,0,229,230,5,118,0,0,
        230,231,5,97,0,0,231,232,5,114,0,0,232,30,1,0,0,0,233,234,5,99,0,
        0,234,235,5,111,0,0,235,236,5,110,0,0,236,237,5,116,0,0,237,238,
        5,105,0,0,238,239,5,110,0,0,239,240,5,117,0,0,240,241,5,101,0,0,
        241,32,1,0,0,0,242,243,5,98,0,0,243,244,5,114,0,0,244,245,5,101,
        0,0,245,246,5,97,0,0,246,247,5,107,0,0,247,34,1,0,0,0,248,249,5,
        114,0,0,249,250,5,97,0,0,250,251,5,110,0,0,251,252,5,103,0,0,252,
        253,5,101,0,0,253,36,1,0,0,0,254,255,5,110,0,0,255,256,5,105,0,0,
        256,257,5,108,0,0,257,38,1,0,0,0,258,259,5,116,0,0,259,260,5,114,
        0,0,260,261,5,117,0,0,261,262,5,101,0,0,262,40,1,0,0,0,263,264,5,
        102,0,0,264,265,5,97,0,0,265,266,5,108,0,0,266,267,5,115,0,0,267,
        268,5,101,0,0,268,42,1,0,0,0,269,270,5,43,0,0,270,44,1,0,0,0,271,
        272,5,45,0,0,272,46,1,0,0,0,273,274,5,42,0,0,274,48,1,0,0,0,275,
        276,5,47,0,0,276,50,1,0,0,0,277,278,5,37,0,0,278,52,1,0,0,0,279,
        280,5,61,0,0,280,281,5,61,0,0,281,54,1,0,0,0,282,283,5,33,0,0,283,
        284,5,61,0,0,284,56,1,0,0,0,285,286,5,60,0,0,286,58,1,0,0,0,287,
        288,5,60,0,0,288,289,5,61,0,0,289,60,1,0,0,0,290,291,5,62,0,0,291,
        62,1,0,0,0,292,293,5,62,0,0,293,294,5,61,0,0,294,64,1,0,0,0,295,
        296,5,38,0,0,296,297,5,38,0,0,297,66,1,0,0,0,298,299,5,124,0,0,299,
        300,5,124,0,0,300,68,1,0,0,0,301,302,5,33,0,0,302,70,1,0,0,0,303,
        304,5,61,0,0,304,72,1,0,0,0,305,306,5,43,0,0,306,307,5,61,0,0,307,
        74,1,0,0,0,308,309,5,45,0,0,309,310,5,61,0,0,310,76,1,0,0,0,311,
        312,5,42,0,0,312,313,5,61,0,0,313,78,1,0,0,0,314,315,5,47,0,0,315,
        316,5,61,0,0,316,80,1,0,0,0,317,318,5,37,0,0,318,319,5,61,0,0,319,
        82,1,0,0,0,320,321,5,46,0,0,321,84,1,0,0,0,322,323,5,40,0,0,323,
        86,1,0,0,0,324,325,5,41,0,0,325,88,1,0,0,0,326,327,5,123,0,0,327,
        90,1,0,0,0,328,329,5,125,0,0,329,92,1,0,0,0,330,331,5,91,0,0,331,
        94,1,0,0,0,332,333,5,93,0,0,333,96,1,0,0,0,334,335,5,44,0,0,335,
        98,1,0,0,0,336,337,5,59,0,0,337,100,1,0,0,0,338,342,7,0,0,0,339,
        341,7,1,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,
        343,1,0,0,0,343,102,1,0,0,0,344,342,1,0,0,0,345,346,7,2,0,0,346,
        104,1,0,0,0,347,348,7,3,0,0,348,106,1,0,0,0,349,350,5,48,0,0,350,
        354,5,111,0,0,351,352,5,48,0,0,352,354,5,79,0,0,353,349,1,0,0,0,
        353,351,1,0,0,0,354,356,1,0,0,0,355,357,7,3,0,0,356,355,1,0,0,0,
        357,358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,108,1,0,0,0,
        360,361,7,4,0,0,361,110,1,0,0,0,362,363,5,48,0,0,363,367,5,120,0,
        0,364,365,5,48,0,0,365,367,5,88,0,0,366,362,1,0,0,0,366,364,1,0,
        0,0,367,369,1,0,0,0,368,370,7,4,0,0,369,368,1,0,0,0,370,371,1,0,
        0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,112,1,0,0,0,373,382,5,48,
        0,0,374,378,7,5,0,0,375,377,7,2,0,0,376,375,1,0,0,0,377,380,1,0,
        0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,382,1,0,0,0,380,378,1,0,
        0,0,381,373,1,0,0,0,381,374,1,0,0,0,382,114,1,0,0,0,383,387,5,46,
        0,0,384,386,7,2,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,
        0,0,387,388,1,0,0,0,388,116,1,0,0,0,389,387,1,0,0,0,390,391,7,6,
        0,0,391,118,1,0,0,0,392,393,5,48,0,0,393,397,5,98,0,0,394,395,5,
        48,0,0,395,397,5,66,0,0,396,392,1,0,0,0,396,394,1,0,0,0,397,399,
        1,0,0,0,398,400,7,6,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,
        1,0,0,0,401,402,1,0,0,0,402,120,1,0,0,0,403,405,7,7,0,0,404,406,
        7,8,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,
        7,2,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,1,0,0,0,410,411,
        1,0,0,0,411,122,1,0,0,0,412,423,3,113,56,0,413,414,3,111,55,0,414,
        415,6,61,0,0,415,423,1,0,0,0,416,417,3,107,53,0,417,418,6,61,1,0,
        418,423,1,0,0,0,419,420,3,119,59,0,420,421,6,61,2,0,421,423,1,0,
        0,0,422,412,1,0,0,0,422,413,1,0,0,0,422,416,1,0,0,0,422,419,1,0,
        0,0,423,124,1,0,0,0,424,426,7,2,0,0,425,424,1,0,0,0,426,427,1,0,
        0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,3,115,
        57,0,430,432,3,121,60,0,431,430,1,0,0,0,431,432,1,0,0,0,432,444,
        1,0,0,0,433,435,3,115,57,0,434,436,3,121,60,0,435,434,1,0,0,0,435,
        436,1,0,0,0,436,444,1,0,0,0,437,439,7,2,0,0,438,437,1,0,0,0,439,
        440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,
        444,3,121,60,0,443,425,1,0,0,0,443,433,1,0,0,0,443,438,1,0,0,0,444,
        126,1,0,0,0,445,446,7,9,0,0,446,128,1,0,0,0,447,451,8,10,0,0,448,
        449,5,92,0,0,449,451,3,127,63,0,450,447,1,0,0,0,450,448,1,0,0,0,
        451,130,1,0,0,0,452,456,5,34,0,0,453,455,3,129,64,0,454,453,1,0,
        0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,
        0,0,458,456,1,0,0,0,459,460,5,34,0,0,460,461,6,65,3,0,461,132,1,
        0,0,0,462,464,7,11,0,0,463,462,1,0,0,0,464,465,1,0,0,0,465,463,1,
        0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,6,66,4,0,468,134,1,
        0,0,0,469,470,5,47,0,0,470,471,5,47,0,0,471,475,1,0,0,0,472,474,
        8,12,0,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,
        1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,479,6,67,4,0,479,136,
        1,0,0,0,480,481,5,47,0,0,481,482,5,42,0,0,482,487,1,0,0,0,483,486,
        3,137,68,0,484,486,9,0,0,0,485,483,1,0,0,0,485,484,1,0,0,0,486,489,
        1,0,0,0,487,488,1,0,0,0,487,485,1,0,0,0,488,490,1,0,0,0,489,487,
        1,0,0,0,490,491,5,42,0,0,491,492,5,47,0,0,492,493,1,0,0,0,493,494,
        6,68,4,0,494,138,1,0,0,0,495,499,5,34,0,0,496,498,3,129,64,0,497,
        496,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,
        503,1,0,0,0,501,499,1,0,0,0,502,504,7,13,0,0,503,502,1,0,0,0,504,
        505,1,0,0,0,505,506,6,69,5,0,506,140,1,0,0,0,507,511,5,34,0,0,508,
        510,3,129,64,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,
        512,1,0,0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,515,5,92,0,0,515,
        519,8,9,0,0,516,518,3,129,64,0,517,516,1,0,0,0,518,521,1,0,0,0,519,
        517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,
        523,6,70,6,0,523,142,1,0,0,0,524,525,9,0,0,0,525,526,6,71,7,0,526,
        144,1,0,0,0,29,0,342,353,358,366,371,378,381,387,396,401,405,410,
        422,427,431,435,440,443,450,456,465,475,485,487,499,503,511,519,
        8,1,61,0,1,61,1,1,61,2,1,65,3,6,0,0,1,69,4,1,70,5,1,71,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    CONST = 14
    VAR = 15
    CONTINUE = 16
    BREAK = 17
    RANGE = 18
    NIL = 19
    TRUE = 20
    FALSE = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_OR_EQUAL = 30
    GREATER = 31
    GREATER_OR_EQUAL = 32
    AND = 33
    OR = 34
    NOT = 35
    ASSIGN = 36
    ADD_ASSIGN = 37
    SUB_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    LP = 43
    RP = 44
    LB = 45
    RB = 46
    LSB = 47
    RSB = 48
    COMMA = 49
    SEMI = 50
    ID = 51
    INT_LIT = 52
    FLOAT_LIT = 53
    STRING_LIT = 54
    WS = 55
    LINE_COMMENT = 56
    BLOCK_COMMENT = 57
    UNCLOSE_STRING = 58
    ILLEGAL_ESCAPE = 59
    ERROR_CHAR = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'votien'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", "SEMI", 
            "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "LINE_COMMENT", 
            "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "LP", 
                  "RP", "LB", "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", 
                  "DIGIT", "OCTAL_DIGIT", "OCTAL", "HEX_DIGIT", "HEX", "DECIMAL", 
                  "DECIMAL_PART", "BINARY_DIGIT", "BINARY", "EXPONENT", 
                  "INT_LIT", "FLOAT_LIT", "ESC_CHAR", "STR_CHAR", "STRING_LIT", 
                  "WS", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "173_task1.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text[1:]);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text[1:]);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.INT_LIT_action 
            actions[65] = self.STRING_LIT_action 
            actions[69] = self.UNCLOSE_STRING_action 
            actions[70] = self.ILLEGAL_ESCAPE_action 
            actions[71] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = str(int(self.text,16))
     

        if actionIndex == 1:
            self.text = str(int(self.text,8))
     

        if actionIndex == 2:
            self.text = str(int(self.text,2))
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
              #nếu có kí tự escape không hợp lệ (không phải \b, \r, \n, \t, \', \", \\)
                illegal_str = str(self.text)
                i = illegal_str.find('\\') #tìm vị trí xuất hiện đầu tiên của kí tự escape

                while i != -1 and illegal_str[i+1] in 'brnt\'"\\': #hợp lệ thì tìm tiếp
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            raise ErrorToken(self.text)
     



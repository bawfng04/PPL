# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL2/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,61,531,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,3,0,149,8,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,345,8,51,10,51,12,51,
        348,9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,3,54,358,8,54,1,
        54,4,54,361,8,54,11,54,12,54,362,1,55,1,55,1,56,1,56,1,56,1,56,3,
        56,371,8,56,1,56,4,56,374,8,56,11,56,12,56,375,1,57,1,57,1,57,5,
        57,381,8,57,10,57,12,57,384,9,57,3,57,386,8,57,1,58,1,58,5,58,390,
        8,58,10,58,12,58,393,9,58,1,59,1,59,1,60,1,60,1,60,1,60,3,60,401,
        8,60,1,60,4,60,404,8,60,11,60,12,60,405,1,61,1,61,3,61,410,8,61,
        1,61,4,61,413,8,61,11,61,12,61,414,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,427,8,62,1,63,4,63,430,8,63,11,63,12,63,
        431,1,63,1,63,3,63,436,8,63,1,63,1,63,3,63,440,8,63,1,63,4,63,443,
        8,63,11,63,12,63,444,1,63,3,63,448,8,63,1,64,1,64,1,65,1,65,1,65,
        3,65,455,8,65,1,66,1,66,5,66,459,8,66,10,66,12,66,462,9,66,1,66,
        1,66,1,66,1,67,4,67,468,8,67,11,67,12,67,469,1,67,1,67,1,68,1,68,
        1,68,1,68,5,68,478,8,68,10,68,12,68,481,9,68,1,68,1,68,1,69,1,69,
        1,69,1,69,1,69,5,69,490,8,69,10,69,12,69,493,9,69,1,69,1,69,1,69,
        1,69,1,69,1,70,1,70,5,70,502,8,70,10,70,12,70,505,9,70,1,70,3,70,
        508,8,70,1,70,1,70,1,71,1,71,5,71,514,8,71,10,71,12,71,517,9,71,
        1,71,1,71,1,71,5,71,522,8,71,10,71,12,71,525,9,71,1,71,1,71,1,72,
        1,72,1,72,1,491,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,0,
        107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,53,127,
        54,129,0,131,0,133,55,135,56,137,57,139,58,141,59,143,60,145,61,
        1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,49,57,1,0,48,49,2,0,69,69,
        101,101,2,0,43,43,45,45,7,0,34,34,39,39,92,92,98,98,110,110,114,
        114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,10,12,13,32,32,2,0,
        10,10,13,13,2,1,10,10,13,13,549,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,
        139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,148,1,0,
        0,0,3,154,1,0,0,0,5,156,1,0,0,0,7,159,1,0,0,0,9,164,1,0,0,0,11,168,
        1,0,0,0,13,175,1,0,0,0,15,180,1,0,0,0,17,185,1,0,0,0,19,192,1,0,
        0,0,21,202,1,0,0,0,23,209,1,0,0,0,25,213,1,0,0,0,27,219,1,0,0,0,
        29,227,1,0,0,0,31,233,1,0,0,0,33,237,1,0,0,0,35,246,1,0,0,0,37,252,
        1,0,0,0,39,258,1,0,0,0,41,262,1,0,0,0,43,267,1,0,0,0,45,273,1,0,
        0,0,47,275,1,0,0,0,49,277,1,0,0,0,51,279,1,0,0,0,53,281,1,0,0,0,
        55,283,1,0,0,0,57,286,1,0,0,0,59,289,1,0,0,0,61,291,1,0,0,0,63,294,
        1,0,0,0,65,296,1,0,0,0,67,299,1,0,0,0,69,302,1,0,0,0,71,305,1,0,
        0,0,73,307,1,0,0,0,75,309,1,0,0,0,77,312,1,0,0,0,79,315,1,0,0,0,
        81,318,1,0,0,0,83,321,1,0,0,0,85,324,1,0,0,0,87,326,1,0,0,0,89,328,
        1,0,0,0,91,330,1,0,0,0,93,332,1,0,0,0,95,334,1,0,0,0,97,336,1,0,
        0,0,99,338,1,0,0,0,101,340,1,0,0,0,103,342,1,0,0,0,105,349,1,0,0,
        0,107,351,1,0,0,0,109,357,1,0,0,0,111,364,1,0,0,0,113,370,1,0,0,
        0,115,385,1,0,0,0,117,387,1,0,0,0,119,394,1,0,0,0,121,400,1,0,0,
        0,123,407,1,0,0,0,125,426,1,0,0,0,127,447,1,0,0,0,129,449,1,0,0,
        0,131,454,1,0,0,0,133,456,1,0,0,0,135,467,1,0,0,0,137,473,1,0,0,
        0,139,484,1,0,0,0,141,499,1,0,0,0,143,511,1,0,0,0,145,528,1,0,0,
        0,147,149,5,13,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,
        0,150,151,5,10,0,0,151,152,1,0,0,0,152,153,6,0,0,0,153,2,1,0,0,0,
        154,155,5,58,0,0,155,4,1,0,0,0,156,157,5,105,0,0,157,158,5,102,0,
        0,158,6,1,0,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,162,5,115,
        0,0,162,163,5,101,0,0,163,8,1,0,0,0,164,165,5,102,0,0,165,166,5,
        111,0,0,166,167,5,114,0,0,167,10,1,0,0,0,168,169,5,114,0,0,169,170,
        5,101,0,0,170,171,5,116,0,0,171,172,5,117,0,0,172,173,5,114,0,0,
        173,174,5,110,0,0,174,12,1,0,0,0,175,176,5,102,0,0,176,177,5,117,
        0,0,177,178,5,110,0,0,178,179,5,99,0,0,179,14,1,0,0,0,180,181,5,
        116,0,0,181,182,5,121,0,0,182,183,5,112,0,0,183,184,5,101,0,0,184,
        16,1,0,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,188,5,114,0,0,
        188,189,5,117,0,0,189,190,5,99,0,0,190,191,5,116,0,0,191,18,1,0,
        0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,196,
        5,101,0,0,196,197,5,114,0,0,197,198,5,102,0,0,198,199,5,97,0,0,199,
        200,5,99,0,0,200,201,5,101,0,0,201,20,1,0,0,0,202,203,5,115,0,0,
        203,204,5,116,0,0,204,205,5,114,0,0,205,206,5,105,0,0,206,207,5,
        110,0,0,207,208,5,103,0,0,208,22,1,0,0,0,209,210,5,105,0,0,210,211,
        5,110,0,0,211,212,5,116,0,0,212,24,1,0,0,0,213,214,5,102,0,0,214,
        215,5,108,0,0,215,216,5,111,0,0,216,217,5,97,0,0,217,218,5,116,0,
        0,218,26,1,0,0,0,219,220,5,98,0,0,220,221,5,111,0,0,221,222,5,111,
        0,0,222,223,5,108,0,0,223,224,5,101,0,0,224,225,5,97,0,0,225,226,
        5,110,0,0,226,28,1,0,0,0,227,228,5,99,0,0,228,229,5,111,0,0,229,
        230,5,110,0,0,230,231,5,115,0,0,231,232,5,116,0,0,232,30,1,0,0,0,
        233,234,5,118,0,0,234,235,5,97,0,0,235,236,5,114,0,0,236,32,1,0,
        0,0,237,238,5,99,0,0,238,239,5,111,0,0,239,240,5,110,0,0,240,241,
        5,116,0,0,241,242,5,105,0,0,242,243,5,110,0,0,243,244,5,117,0,0,
        244,245,5,101,0,0,245,34,1,0,0,0,246,247,5,98,0,0,247,248,5,114,
        0,0,248,249,5,101,0,0,249,250,5,97,0,0,250,251,5,107,0,0,251,36,
        1,0,0,0,252,253,5,114,0,0,253,254,5,97,0,0,254,255,5,110,0,0,255,
        256,5,103,0,0,256,257,5,101,0,0,257,38,1,0,0,0,258,259,5,110,0,0,
        259,260,5,105,0,0,260,261,5,108,0,0,261,40,1,0,0,0,262,263,5,116,
        0,0,263,264,5,114,0,0,264,265,5,117,0,0,265,266,5,101,0,0,266,42,
        1,0,0,0,267,268,5,102,0,0,268,269,5,97,0,0,269,270,5,108,0,0,270,
        271,5,115,0,0,271,272,5,101,0,0,272,44,1,0,0,0,273,274,5,43,0,0,
        274,46,1,0,0,0,275,276,5,45,0,0,276,48,1,0,0,0,277,278,5,42,0,0,
        278,50,1,0,0,0,279,280,5,47,0,0,280,52,1,0,0,0,281,282,5,37,0,0,
        282,54,1,0,0,0,283,284,5,61,0,0,284,285,5,61,0,0,285,56,1,0,0,0,
        286,287,5,33,0,0,287,288,5,61,0,0,288,58,1,0,0,0,289,290,5,60,0,
        0,290,60,1,0,0,0,291,292,5,60,0,0,292,293,5,61,0,0,293,62,1,0,0,
        0,294,295,5,62,0,0,295,64,1,0,0,0,296,297,5,62,0,0,297,298,5,61,
        0,0,298,66,1,0,0,0,299,300,5,38,0,0,300,301,5,38,0,0,301,68,1,0,
        0,0,302,303,5,124,0,0,303,304,5,124,0,0,304,70,1,0,0,0,305,306,5,
        33,0,0,306,72,1,0,0,0,307,308,5,61,0,0,308,74,1,0,0,0,309,310,5,
        43,0,0,310,311,5,61,0,0,311,76,1,0,0,0,312,313,5,45,0,0,313,314,
        5,61,0,0,314,78,1,0,0,0,315,316,5,42,0,0,316,317,5,61,0,0,317,80,
        1,0,0,0,318,319,5,47,0,0,319,320,5,61,0,0,320,82,1,0,0,0,321,322,
        5,37,0,0,322,323,5,61,0,0,323,84,1,0,0,0,324,325,5,46,0,0,325,86,
        1,0,0,0,326,327,5,40,0,0,327,88,1,0,0,0,328,329,5,41,0,0,329,90,
        1,0,0,0,330,331,5,123,0,0,331,92,1,0,0,0,332,333,5,125,0,0,333,94,
        1,0,0,0,334,335,5,91,0,0,335,96,1,0,0,0,336,337,5,93,0,0,337,98,
        1,0,0,0,338,339,5,44,0,0,339,100,1,0,0,0,340,341,5,59,0,0,341,102,
        1,0,0,0,342,346,7,0,0,0,343,345,7,1,0,0,344,343,1,0,0,0,345,348,
        1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,104,1,0,0,0,348,346,
        1,0,0,0,349,350,7,2,0,0,350,106,1,0,0,0,351,352,7,3,0,0,352,108,
        1,0,0,0,353,354,5,48,0,0,354,358,5,111,0,0,355,356,5,48,0,0,356,
        358,5,79,0,0,357,353,1,0,0,0,357,355,1,0,0,0,358,360,1,0,0,0,359,
        361,7,3,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,110,1,0,0,0,364,365,7,4,0,0,365,112,1,0,0,0,366,
        367,5,48,0,0,367,371,5,120,0,0,368,369,5,48,0,0,369,371,5,88,0,0,
        370,366,1,0,0,0,370,368,1,0,0,0,371,373,1,0,0,0,372,374,7,4,0,0,
        373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,
        376,114,1,0,0,0,377,386,5,48,0,0,378,382,7,5,0,0,379,381,7,2,0,0,
        380,379,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,
        383,386,1,0,0,0,384,382,1,0,0,0,385,377,1,0,0,0,385,378,1,0,0,0,
        386,116,1,0,0,0,387,391,5,46,0,0,388,390,7,2,0,0,389,388,1,0,0,0,
        390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,118,1,0,0,0,
        393,391,1,0,0,0,394,395,7,6,0,0,395,120,1,0,0,0,396,397,5,48,0,0,
        397,401,5,98,0,0,398,399,5,48,0,0,399,401,5,66,0,0,400,396,1,0,0,
        0,400,398,1,0,0,0,401,403,1,0,0,0,402,404,7,6,0,0,403,402,1,0,0,
        0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,122,1,0,0,
        0,407,409,7,7,0,0,408,410,7,8,0,0,409,408,1,0,0,0,409,410,1,0,0,
        0,410,412,1,0,0,0,411,413,7,2,0,0,412,411,1,0,0,0,413,414,1,0,0,
        0,414,412,1,0,0,0,414,415,1,0,0,0,415,124,1,0,0,0,416,427,3,115,
        57,0,417,418,3,113,56,0,418,419,6,62,1,0,419,427,1,0,0,0,420,421,
        3,109,54,0,421,422,6,62,2,0,422,427,1,0,0,0,423,424,3,121,60,0,424,
        425,6,62,3,0,425,427,1,0,0,0,426,416,1,0,0,0,426,417,1,0,0,0,426,
        420,1,0,0,0,426,423,1,0,0,0,427,126,1,0,0,0,428,430,7,2,0,0,429,
        428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,
        433,1,0,0,0,433,435,3,117,58,0,434,436,3,123,61,0,435,434,1,0,0,
        0,435,436,1,0,0,0,436,448,1,0,0,0,437,439,3,117,58,0,438,440,3,123,
        61,0,439,438,1,0,0,0,439,440,1,0,0,0,440,448,1,0,0,0,441,443,7,2,
        0,0,442,441,1,0,0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,
        0,0,445,446,1,0,0,0,446,448,3,123,61,0,447,429,1,0,0,0,447,437,1,
        0,0,0,447,442,1,0,0,0,448,128,1,0,0,0,449,450,7,9,0,0,450,130,1,
        0,0,0,451,455,8,10,0,0,452,453,5,92,0,0,453,455,3,129,64,0,454,451,
        1,0,0,0,454,452,1,0,0,0,455,132,1,0,0,0,456,460,5,34,0,0,457,459,
        3,131,65,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,
        1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,464,5,34,0,0,464,465,
        6,66,4,0,465,134,1,0,0,0,466,468,7,11,0,0,467,466,1,0,0,0,468,469,
        1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,
        6,67,0,0,472,136,1,0,0,0,473,474,5,47,0,0,474,475,5,47,0,0,475,479,
        1,0,0,0,476,478,8,12,0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,
        1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,
        6,68,0,0,483,138,1,0,0,0,484,485,5,47,0,0,485,486,5,42,0,0,486,491,
        1,0,0,0,487,490,3,139,69,0,488,490,9,0,0,0,489,487,1,0,0,0,489,488,
        1,0,0,0,490,493,1,0,0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,
        1,0,0,0,493,491,1,0,0,0,494,495,5,42,0,0,495,496,5,47,0,0,496,497,
        1,0,0,0,497,498,6,69,0,0,498,140,1,0,0,0,499,503,5,34,0,0,500,502,
        3,131,65,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,
        1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,506,508,7,13,0,0,507,506,
        1,0,0,0,508,509,1,0,0,0,509,510,6,70,5,0,510,142,1,0,0,0,511,515,
        5,34,0,0,512,514,3,131,65,0,513,512,1,0,0,0,514,517,1,0,0,0,515,
        513,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,
        519,5,92,0,0,519,523,8,9,0,0,520,522,3,131,65,0,521,520,1,0,0,0,
        522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,
        525,523,1,0,0,0,526,527,6,71,6,0,527,144,1,0,0,0,528,529,9,0,0,0,
        529,530,6,72,7,0,530,146,1,0,0,0,30,0,148,346,357,362,370,375,382,
        385,391,400,405,409,414,426,431,435,439,444,447,454,460,469,479,
        489,491,503,507,515,523,8,6,0,0,1,62,0,1,62,1,1,62,2,1,66,3,1,70,
        4,1,71,5,1,72,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NEWLINE = 1
    COLON = 2
    IF = 3
    ELSE = 4
    FOR = 5
    RETURN = 6
    FUNC = 7
    TYPE = 8
    STRUCT = 9
    INTERFACE = 10
    STRING = 11
    INT = 12
    FLOAT = 13
    BOOLEAN = 14
    CONST = 15
    VAR = 16
    CONTINUE = 17
    BREAK = 18
    RANGE = 19
    NIL = 20
    TRUE = 21
    FALSE = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQUAL = 28
    NOT_EQUAL = 29
    LESS = 30
    LESS_OR_EQUAL = 31
    GREATER = 32
    GREATER_OR_EQUAL = 33
    AND = 34
    OR = 35
    NOT = 36
    ASSIGN = 37
    ADD_ASSIGN = 38
    SUB_ASSIGN = 39
    MUL_ASSIGN = 40
    DIV_ASSIGN = 41
    MOD_ASSIGN = 42
    DOT = 43
    LP = 44
    RP = 45
    LB = 46
    RB = 47
    LSB = 48
    RSB = 49
    COMMA = 50
    SEMI = 51
    ID = 52
    INT_LIT = 53
    FLOAT_LIT = 54
    STRING_LIT = 55
    WS = 56
    LINE_COMMENT = 57
    BLOCK_COMMENT = 58
    UNCLOSE_STRING = 59
    ILLEGAL_ESCAPE = 60
    ERROR_CHAR = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
            "'struct'", "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "COLON", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
            "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
            "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
            "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
            "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", "AND", 
            "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
            "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "LP", "RP", "LB", "RB", "LSB", 
            "RSB", "COMMA", "SEMI", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
            "WS", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "NEWLINE", "COLON", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                  "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                  "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                  "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", "GREATER", 
                  "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", 
                  "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                  "DOT", "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", 
                  "SEMI", "ID", "DIGIT", "OCTAL_DIGIT", "OCTAL", "HEX_DIGIT", 
                  "HEX", "DECIMAL", "DECIMAL_PART", "BINARY_DIGIT", "BINARY", 
                  "EXPONENT", "INT_LIT", "FLOAT_LIT", "ESC_CHAR", "STR_CHAR", 
                  "STRING_LIT", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[62] = self.INT_LIT_action 
            actions[66] = self.STRING_LIT_action 
            actions[70] = self.UNCLOSE_STRING_action 
            actions[71] = self.ILLEGAL_ESCAPE_action 
            actions[72] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = str(int(self.text,16))
     

        if actionIndex == 1:
            self.text = str(int(self.text,8))
     

        if actionIndex == 2:
            self.text = str(int(self.text,2))
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
              #nếu có kí tự escape không hợp lệ (không phải \b, \r, \n, \t, \', \", \\)
                illegal_str = str(self.text)
                i = illegal_str.find('\\') #tìm vị trí xuất hiện đầu tiên của kí tự escape
                while i != -1 and illegal_str[i+1] in 'brnt\'"\\': #hợp lệ thì tìm tiếp
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            raise ErrorToken(self.text)
     



# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL2p2/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,63,527,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
        25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,
        39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,
        45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
        51,1,52,1,52,5,52,341,8,52,10,52,12,52,344,9,52,1,53,1,53,1,53,5,
        53,349,8,53,10,53,12,53,352,9,53,3,53,354,8,53,1,54,1,54,1,54,1,
        54,3,54,360,8,54,1,54,4,54,363,8,54,11,54,12,54,364,1,55,1,55,1,
        55,1,55,3,55,371,8,55,1,55,4,55,374,8,55,11,55,12,55,375,1,56,1,
        56,1,56,1,56,3,56,382,8,56,1,56,4,56,385,8,56,11,56,12,56,386,1,
        57,1,57,1,57,5,57,392,8,57,10,57,12,57,395,9,57,3,57,397,8,57,1,
        58,1,58,5,58,401,8,58,10,58,12,58,404,9,58,1,59,1,59,3,59,408,8,
        59,1,59,1,59,1,59,5,59,413,8,59,10,59,12,59,416,9,59,3,59,418,8,
        59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,430,8,
        60,1,61,1,61,1,61,3,61,435,8,61,1,62,1,62,1,63,1,63,1,63,3,63,442,
        8,63,1,64,1,64,5,64,446,8,64,10,64,12,64,449,9,64,1,64,1,64,1,64,
        1,65,4,65,455,8,65,11,65,12,65,456,1,65,1,65,1,66,1,66,1,66,1,66,
        3,66,465,8,66,1,67,1,67,1,67,1,67,1,67,5,67,472,8,67,10,67,12,67,
        475,9,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,486,8,
        68,10,68,12,68,489,9,68,1,68,1,68,1,69,1,69,5,69,495,8,69,10,69,
        12,69,498,9,69,1,69,3,69,501,8,69,1,69,1,69,1,70,1,70,5,70,507,8,
        70,10,70,12,70,510,9,70,1,70,1,70,1,70,5,70,515,8,70,10,70,12,70,
        518,9,70,1,70,3,70,521,8,70,1,70,1,70,1,71,1,71,1,71,1,473,0,72,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,0,111,0,113,
        0,115,0,117,0,119,0,121,54,123,55,125,0,127,0,129,56,131,57,133,
        58,135,59,137,60,139,61,141,62,143,63,1,0,14,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,3,0,48,57,65,
        70,97,102,1,0,48,55,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,
        5,0,34,34,92,92,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,
        92,3,0,9,9,12,13,32,32,2,0,10,10,13,13,2,1,10,10,13,13,547,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
        0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,129,
        1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,
        0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,1,145,1,0,0,0,3,148,1,
        0,0,0,5,153,1,0,0,0,7,157,1,0,0,0,9,164,1,0,0,0,11,169,1,0,0,0,13,
        174,1,0,0,0,15,181,1,0,0,0,17,191,1,0,0,0,19,198,1,0,0,0,21,202,
        1,0,0,0,23,208,1,0,0,0,25,216,1,0,0,0,27,222,1,0,0,0,29,226,1,0,
        0,0,31,235,1,0,0,0,33,241,1,0,0,0,35,247,1,0,0,0,37,251,1,0,0,0,
        39,256,1,0,0,0,41,262,1,0,0,0,43,264,1,0,0,0,45,266,1,0,0,0,47,268,
        1,0,0,0,49,270,1,0,0,0,51,272,1,0,0,0,53,275,1,0,0,0,55,278,1,0,
        0,0,57,280,1,0,0,0,59,283,1,0,0,0,61,285,1,0,0,0,63,288,1,0,0,0,
        65,291,1,0,0,0,67,294,1,0,0,0,69,296,1,0,0,0,71,298,1,0,0,0,73,301,
        1,0,0,0,75,304,1,0,0,0,77,307,1,0,0,0,79,310,1,0,0,0,81,313,1,0,
        0,0,83,315,1,0,0,0,85,317,1,0,0,0,87,320,1,0,0,0,89,322,1,0,0,0,
        91,324,1,0,0,0,93,326,1,0,0,0,95,328,1,0,0,0,97,330,1,0,0,0,99,332,
        1,0,0,0,101,334,1,0,0,0,103,336,1,0,0,0,105,338,1,0,0,0,107,353,
        1,0,0,0,109,359,1,0,0,0,111,370,1,0,0,0,113,381,1,0,0,0,115,396,
        1,0,0,0,117,398,1,0,0,0,119,405,1,0,0,0,121,429,1,0,0,0,123,431,
        1,0,0,0,125,436,1,0,0,0,127,441,1,0,0,0,129,443,1,0,0,0,131,454,
        1,0,0,0,133,464,1,0,0,0,135,466,1,0,0,0,137,481,1,0,0,0,139,492,
        1,0,0,0,141,504,1,0,0,0,143,524,1,0,0,0,145,146,5,105,0,0,146,147,
        5,102,0,0,147,2,1,0,0,0,148,149,5,101,0,0,149,150,5,108,0,0,150,
        151,5,115,0,0,151,152,5,101,0,0,152,4,1,0,0,0,153,154,5,102,0,0,
        154,155,5,111,0,0,155,156,5,114,0,0,156,6,1,0,0,0,157,158,5,114,
        0,0,158,159,5,101,0,0,159,160,5,116,0,0,160,161,5,117,0,0,161,162,
        5,114,0,0,162,163,5,110,0,0,163,8,1,0,0,0,164,165,5,102,0,0,165,
        166,5,117,0,0,166,167,5,110,0,0,167,168,5,99,0,0,168,10,1,0,0,0,
        169,170,5,116,0,0,170,171,5,121,0,0,171,172,5,112,0,0,172,173,5,
        101,0,0,173,12,1,0,0,0,174,175,5,115,0,0,175,176,5,116,0,0,176,177,
        5,114,0,0,177,178,5,117,0,0,178,179,5,99,0,0,179,180,5,116,0,0,180,
        14,1,0,0,0,181,182,5,105,0,0,182,183,5,110,0,0,183,184,5,116,0,0,
        184,185,5,101,0,0,185,186,5,114,0,0,186,187,5,102,0,0,187,188,5,
        97,0,0,188,189,5,99,0,0,189,190,5,101,0,0,190,16,1,0,0,0,191,192,
        5,115,0,0,192,193,5,116,0,0,193,194,5,114,0,0,194,195,5,105,0,0,
        195,196,5,110,0,0,196,197,5,103,0,0,197,18,1,0,0,0,198,199,5,105,
        0,0,199,200,5,110,0,0,200,201,5,116,0,0,201,20,1,0,0,0,202,203,5,
        102,0,0,203,204,5,108,0,0,204,205,5,111,0,0,205,206,5,97,0,0,206,
        207,5,116,0,0,207,22,1,0,0,0,208,209,5,98,0,0,209,210,5,111,0,0,
        210,211,5,111,0,0,211,212,5,108,0,0,212,213,5,101,0,0,213,214,5,
        97,0,0,214,215,5,110,0,0,215,24,1,0,0,0,216,217,5,99,0,0,217,218,
        5,111,0,0,218,219,5,110,0,0,219,220,5,115,0,0,220,221,5,116,0,0,
        221,26,1,0,0,0,222,223,5,118,0,0,223,224,5,97,0,0,224,225,5,114,
        0,0,225,28,1,0,0,0,226,227,5,99,0,0,227,228,5,111,0,0,228,229,5,
        110,0,0,229,230,5,116,0,0,230,231,5,105,0,0,231,232,5,110,0,0,232,
        233,5,117,0,0,233,234,5,101,0,0,234,30,1,0,0,0,235,236,5,98,0,0,
        236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,97,0,0,239,240,5,107,
        0,0,240,32,1,0,0,0,241,242,5,114,0,0,242,243,5,97,0,0,243,244,5,
        110,0,0,244,245,5,103,0,0,245,246,5,101,0,0,246,34,1,0,0,0,247,248,
        5,110,0,0,248,249,5,105,0,0,249,250,5,108,0,0,250,36,1,0,0,0,251,
        252,5,116,0,0,252,253,5,114,0,0,253,254,5,117,0,0,254,255,5,101,
        0,0,255,38,1,0,0,0,256,257,5,102,0,0,257,258,5,97,0,0,258,259,5,
        108,0,0,259,260,5,115,0,0,260,261,5,101,0,0,261,40,1,0,0,0,262,263,
        5,43,0,0,263,42,1,0,0,0,264,265,5,45,0,0,265,44,1,0,0,0,266,267,
        5,42,0,0,267,46,1,0,0,0,268,269,5,47,0,0,269,48,1,0,0,0,270,271,
        5,37,0,0,271,50,1,0,0,0,272,273,5,61,0,0,273,274,5,61,0,0,274,52,
        1,0,0,0,275,276,5,33,0,0,276,277,5,61,0,0,277,54,1,0,0,0,278,279,
        5,60,0,0,279,56,1,0,0,0,280,281,5,60,0,0,281,282,5,61,0,0,282,58,
        1,0,0,0,283,284,5,62,0,0,284,60,1,0,0,0,285,286,5,62,0,0,286,287,
        5,61,0,0,287,62,1,0,0,0,288,289,5,38,0,0,289,290,5,38,0,0,290,64,
        1,0,0,0,291,292,5,124,0,0,292,293,5,124,0,0,293,66,1,0,0,0,294,295,
        5,33,0,0,295,68,1,0,0,0,296,297,5,61,0,0,297,70,1,0,0,0,298,299,
        5,43,0,0,299,300,5,61,0,0,300,72,1,0,0,0,301,302,5,45,0,0,302,303,
        5,61,0,0,303,74,1,0,0,0,304,305,5,42,0,0,305,306,5,61,0,0,306,76,
        1,0,0,0,307,308,5,47,0,0,308,309,5,61,0,0,309,78,1,0,0,0,310,311,
        5,37,0,0,311,312,5,61,0,0,312,80,1,0,0,0,313,314,5,46,0,0,314,82,
        1,0,0,0,315,316,5,58,0,0,316,84,1,0,0,0,317,318,5,58,0,0,318,319,
        5,61,0,0,319,86,1,0,0,0,320,321,5,95,0,0,321,88,1,0,0,0,322,323,
        5,40,0,0,323,90,1,0,0,0,324,325,5,41,0,0,325,92,1,0,0,0,326,327,
        5,123,0,0,327,94,1,0,0,0,328,329,5,125,0,0,329,96,1,0,0,0,330,331,
        5,91,0,0,331,98,1,0,0,0,332,333,5,93,0,0,333,100,1,0,0,0,334,335,
        5,44,0,0,335,102,1,0,0,0,336,337,5,59,0,0,337,104,1,0,0,0,338,342,
        7,0,0,0,339,341,7,1,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,
        1,0,0,0,342,343,1,0,0,0,343,106,1,0,0,0,344,342,1,0,0,0,345,354,
        5,48,0,0,346,350,7,2,0,0,347,349,7,3,0,0,348,347,1,0,0,0,349,352,
        1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,350,
        1,0,0,0,353,345,1,0,0,0,353,346,1,0,0,0,354,108,1,0,0,0,355,356,
        5,48,0,0,356,360,5,120,0,0,357,358,5,48,0,0,358,360,5,88,0,0,359,
        355,1,0,0,0,359,357,1,0,0,0,360,362,1,0,0,0,361,363,7,4,0,0,362,
        361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
        110,1,0,0,0,366,367,5,48,0,0,367,371,5,111,0,0,368,369,5,48,0,0,
        369,371,5,79,0,0,370,366,1,0,0,0,370,368,1,0,0,0,371,373,1,0,0,0,
        372,374,7,5,0,0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,
        375,376,1,0,0,0,376,112,1,0,0,0,377,378,5,48,0,0,378,382,5,98,0,
        0,379,380,5,48,0,0,380,382,5,66,0,0,381,377,1,0,0,0,381,379,1,0,
        0,0,382,384,1,0,0,0,383,385,7,6,0,0,384,383,1,0,0,0,385,386,1,0,
        0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,114,1,0,0,0,388,397,5,48,
        0,0,389,393,7,2,0,0,390,392,7,3,0,0,391,390,1,0,0,0,392,395,1,0,
        0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,0,395,393,1,0,
        0,0,396,388,1,0,0,0,396,389,1,0,0,0,397,116,1,0,0,0,398,402,5,46,
        0,0,399,401,7,3,0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,
        0,0,402,403,1,0,0,0,403,118,1,0,0,0,404,402,1,0,0,0,405,407,7,7,
        0,0,406,408,7,8,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,417,1,0,
        0,0,409,418,5,48,0,0,410,414,7,2,0,0,411,413,7,3,0,0,412,411,1,0,
        0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,418,1,0,
        0,0,416,414,1,0,0,0,417,409,1,0,0,0,417,410,1,0,0,0,418,120,1,0,
        0,0,419,430,3,107,53,0,420,421,3,109,54,0,421,422,6,60,0,0,422,430,
        1,0,0,0,423,424,3,111,55,0,424,425,6,60,1,0,425,430,1,0,0,0,426,
        427,3,113,56,0,427,428,6,60,2,0,428,430,1,0,0,0,429,419,1,0,0,0,
        429,420,1,0,0,0,429,423,1,0,0,0,429,426,1,0,0,0,430,122,1,0,0,0,
        431,432,3,115,57,0,432,434,3,117,58,0,433,435,3,119,59,0,434,433,
        1,0,0,0,434,435,1,0,0,0,435,124,1,0,0,0,436,437,7,9,0,0,437,126,
        1,0,0,0,438,442,8,10,0,0,439,440,5,92,0,0,440,442,3,125,62,0,441,
        438,1,0,0,0,441,439,1,0,0,0,442,128,1,0,0,0,443,447,5,34,0,0,444,
        446,3,127,63,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,
        448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,5,34,0,0,451,
        452,6,64,3,0,452,130,1,0,0,0,453,455,7,11,0,0,454,453,1,0,0,0,455,
        456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,
        459,6,65,4,0,459,132,1,0,0,0,460,465,5,10,0,0,461,462,5,13,0,0,462,
        463,5,10,0,0,463,465,6,66,5,0,464,460,1,0,0,0,464,461,1,0,0,0,465,
        134,1,0,0,0,466,467,5,47,0,0,467,468,5,42,0,0,468,473,1,0,0,0,469,
        472,3,135,67,0,470,472,9,0,0,0,471,469,1,0,0,0,471,470,1,0,0,0,472,
        475,1,0,0,0,473,474,1,0,0,0,473,471,1,0,0,0,474,476,1,0,0,0,475,
        473,1,0,0,0,476,477,5,42,0,0,477,478,5,47,0,0,478,479,1,0,0,0,479,
        480,6,67,4,0,480,136,1,0,0,0,481,482,5,47,0,0,482,483,5,47,0,0,483,
        487,1,0,0,0,484,486,8,12,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,
        485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,
        491,6,68,4,0,491,138,1,0,0,0,492,496,5,34,0,0,493,495,3,127,63,0,
        494,493,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,
        497,500,1,0,0,0,498,496,1,0,0,0,499,501,7,13,0,0,500,499,1,0,0,0,
        501,502,1,0,0,0,502,503,6,69,6,0,503,140,1,0,0,0,504,508,5,34,0,
        0,505,507,3,127,63,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,
        0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,5,92,
        0,0,512,516,8,9,0,0,513,515,3,127,63,0,514,513,1,0,0,0,515,518,1,
        0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,520,1,0,0,0,518,516,1,
        0,0,0,519,521,5,34,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,
        0,0,0,522,523,6,70,7,0,523,142,1,0,0,0,524,525,9,0,0,0,525,526,6,
        71,8,0,526,144,1,0,0,0,30,0,342,350,353,359,364,370,375,381,386,
        393,396,402,407,414,417,429,434,441,447,456,464,471,473,487,496,
        500,508,516,520,9,1,60,0,1,60,1,1,60,2,1,64,3,6,0,0,1,66,4,1,69,
        5,1,70,6,1,71,7
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQUAL = 26
    NOT_EQUAL = 27
    LESS = 28
    LESS_OR_EQUAL = 29
    GREATER = 30
    GREATER_OR_EQUAL = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ADD_ASSIGN = 36
    SUB_ASSIGN = 37
    MUL_ASSIGN = 38
    DIV_ASSIGN = 39
    MOD_ASSIGN = 40
    DOT = 41
    COLON = 42
    SHORT_ASSIGN = 43
    UNDERSCORE = 44
    LP = 45
    RP = 46
    LB = 47
    RB = 48
    LSB = 49
    RSB = 50
    COMMA = 51
    SEMI = 52
    ID = 53
    INT_LIT = 54
    FLOAT_LIT = 55
    STRING_LIT = 56
    WS = 57
    NEWLINE = 58
    BLOCK_COMMENT = 59
    LINE_COMMENT = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62
    ERROR_CHAR = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "':'", 
            "':='", "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
            "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "COLON", "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", 
            "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", "INT_LIT", "FLOAT_LIT", 
            "STRING_LIT", "WS", "NEWLINE", "BLOCK_COMMENT", "LINE_COMMENT", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", 
                  "SHORT_ASSIGN", "UNDERSCORE", "LP", "RP", "LB", "RB", 
                  "LSB", "RSB", "COMMA", "SEMI", "ID", "DECIMAL", "HEX", 
                  "OCTAL", "BINARY", "FLOAT_DECIMAL", "DECIMAL_PART", "EXPONENT", 
                  "INT_LIT", "FLOAT_LIT", "ESC_CHAR", "STR_CHAR", "STRING_LIT", 
                  "WS", "NEWLINE", "BLOCK_COMMENT", "LINE_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[60] = self.INT_LIT_action 
            actions[64] = self.STRING_LIT_action 
            actions[66] = self.NEWLINE_action 
            actions[69] = self.UNCLOSE_STRING_action 
            actions[70] = self.ILLEGAL_ESCAPE_action 
            actions[71] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.text = str(int(self.text,16)) 
     

        if actionIndex == 1:
             self.text = str(int(self.text,8)) 
     

        if actionIndex == 2:
             self.text = str(int(self.text,2)) 
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
             self.text = "\n" 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

                    illegal_str = str(self.text)
                    i = illegal_str.find('\\')
                    while i != -1 and illegal_str[i+1] in 'rnt"\\':
                        i = illegal_str.find('\\', i+2)
                    raise IllegalEscape(illegal_str[1:i+2])
                
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            raise ErrorToken(self.text)
     



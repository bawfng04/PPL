# Generated from d:/Projects/PPL-Assignment/BTL/MiniGO_BTL2p2/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,61,531,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,
        29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,
        34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,
        38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
        44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,5,
        50,338,8,50,10,50,12,50,341,9,50,1,51,1,51,1,52,1,52,1,53,1,53,1,
        53,1,53,3,53,351,8,53,1,53,4,53,354,8,53,11,53,12,53,355,1,54,1,
        54,1,55,1,55,1,55,1,55,3,55,364,8,55,1,55,4,55,367,8,55,11,55,12,
        55,368,1,56,1,56,1,56,5,56,374,8,56,10,56,12,56,377,9,56,3,56,379,
        8,56,1,57,1,57,5,57,383,8,57,10,57,12,57,386,9,57,1,58,1,58,1,59,
        1,59,1,59,1,59,3,59,394,8,59,1,59,4,59,397,8,59,11,59,12,59,398,
        1,60,1,60,3,60,403,8,60,1,60,4,60,406,8,60,11,60,12,60,407,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,420,8,61,1,62,
        4,62,423,8,62,11,62,12,62,424,1,62,1,62,3,62,429,8,62,1,62,1,62,
        3,62,433,8,62,1,62,4,62,436,8,62,11,62,12,62,437,1,62,3,62,441,8,
        62,1,63,1,63,1,64,1,64,1,64,3,64,448,8,64,1,65,1,65,5,65,452,8,65,
        10,65,12,65,455,9,65,1,65,1,65,1,65,1,66,4,66,461,8,66,11,66,12,
        66,462,1,66,1,66,1,67,3,67,468,8,67,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,5,68,478,8,68,10,68,12,68,481,9,68,1,68,1,68,1,69,1,69,
        1,69,1,69,1,69,5,69,490,8,69,10,69,12,69,493,9,69,1,69,1,69,1,69,
        1,69,1,69,1,70,1,70,5,70,502,8,70,10,70,12,70,505,9,70,1,70,3,70,
        508,8,70,1,70,1,70,1,71,1,71,5,71,514,8,71,10,71,12,71,517,9,71,
        1,71,1,71,1,71,5,71,522,8,71,10,71,12,71,525,9,71,1,71,1,71,1,72,
        1,72,1,72,1,491,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,0,105,0,
        107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,52,125,53,127,
        0,129,0,131,54,133,55,135,56,137,57,139,58,141,59,143,60,145,61,
        1,0,14,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,49,57,1,0,48,49,2,0,69,69,
        101,101,2,0,43,43,45,45,7,0,34,34,39,39,92,92,98,98,110,110,114,
        114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,10,12,13,32,32,2,0,
        10,10,13,13,2,1,10,10,13,13,549,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,
        139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,
        0,0,3,150,1,0,0,0,5,155,1,0,0,0,7,159,1,0,0,0,9,166,1,0,0,0,11,171,
        1,0,0,0,13,176,1,0,0,0,15,183,1,0,0,0,17,193,1,0,0,0,19,200,1,0,
        0,0,21,204,1,0,0,0,23,210,1,0,0,0,25,218,1,0,0,0,27,224,1,0,0,0,
        29,228,1,0,0,0,31,237,1,0,0,0,33,243,1,0,0,0,35,249,1,0,0,0,37,253,
        1,0,0,0,39,258,1,0,0,0,41,264,1,0,0,0,43,266,1,0,0,0,45,268,1,0,
        0,0,47,270,1,0,0,0,49,272,1,0,0,0,51,274,1,0,0,0,53,277,1,0,0,0,
        55,280,1,0,0,0,57,282,1,0,0,0,59,285,1,0,0,0,61,287,1,0,0,0,63,290,
        1,0,0,0,65,293,1,0,0,0,67,296,1,0,0,0,69,298,1,0,0,0,71,300,1,0,
        0,0,73,303,1,0,0,0,75,306,1,0,0,0,77,309,1,0,0,0,79,312,1,0,0,0,
        81,315,1,0,0,0,83,317,1,0,0,0,85,319,1,0,0,0,87,321,1,0,0,0,89,323,
        1,0,0,0,91,325,1,0,0,0,93,327,1,0,0,0,95,329,1,0,0,0,97,331,1,0,
        0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,342,1,0,0,0,105,344,1,0,0,
        0,107,350,1,0,0,0,109,357,1,0,0,0,111,363,1,0,0,0,113,378,1,0,0,
        0,115,380,1,0,0,0,117,387,1,0,0,0,119,393,1,0,0,0,121,400,1,0,0,
        0,123,419,1,0,0,0,125,440,1,0,0,0,127,442,1,0,0,0,129,447,1,0,0,
        0,131,449,1,0,0,0,133,460,1,0,0,0,135,467,1,0,0,0,137,473,1,0,0,
        0,139,484,1,0,0,0,141,499,1,0,0,0,143,511,1,0,0,0,145,528,1,0,0,
        0,147,148,5,105,0,0,148,149,5,102,0,0,149,2,1,0,0,0,150,151,5,101,
        0,0,151,152,5,108,0,0,152,153,5,115,0,0,153,154,5,101,0,0,154,4,
        1,0,0,0,155,156,5,102,0,0,156,157,5,111,0,0,157,158,5,114,0,0,158,
        6,1,0,0,0,159,160,5,114,0,0,160,161,5,101,0,0,161,162,5,116,0,0,
        162,163,5,117,0,0,163,164,5,114,0,0,164,165,5,110,0,0,165,8,1,0,
        0,0,166,167,5,102,0,0,167,168,5,117,0,0,168,169,5,110,0,0,169,170,
        5,99,0,0,170,10,1,0,0,0,171,172,5,116,0,0,172,173,5,121,0,0,173,
        174,5,112,0,0,174,175,5,101,0,0,175,12,1,0,0,0,176,177,5,115,0,0,
        177,178,5,116,0,0,178,179,5,114,0,0,179,180,5,117,0,0,180,181,5,
        99,0,0,181,182,5,116,0,0,182,14,1,0,0,0,183,184,5,105,0,0,184,185,
        5,110,0,0,185,186,5,116,0,0,186,187,5,101,0,0,187,188,5,114,0,0,
        188,189,5,102,0,0,189,190,5,97,0,0,190,191,5,99,0,0,191,192,5,101,
        0,0,192,16,1,0,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,196,5,
        114,0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,103,0,0,199,
        18,1,0,0,0,200,201,5,105,0,0,201,202,5,110,0,0,202,203,5,116,0,0,
        203,20,1,0,0,0,204,205,5,102,0,0,205,206,5,108,0,0,206,207,5,111,
        0,0,207,208,5,97,0,0,208,209,5,116,0,0,209,22,1,0,0,0,210,211,5,
        98,0,0,211,212,5,111,0,0,212,213,5,111,0,0,213,214,5,108,0,0,214,
        215,5,101,0,0,215,216,5,97,0,0,216,217,5,110,0,0,217,24,1,0,0,0,
        218,219,5,99,0,0,219,220,5,111,0,0,220,221,5,110,0,0,221,222,5,115,
        0,0,222,223,5,116,0,0,223,26,1,0,0,0,224,225,5,118,0,0,225,226,5,
        97,0,0,226,227,5,114,0,0,227,28,1,0,0,0,228,229,5,99,0,0,229,230,
        5,111,0,0,230,231,5,110,0,0,231,232,5,116,0,0,232,233,5,105,0,0,
        233,234,5,110,0,0,234,235,5,117,0,0,235,236,5,101,0,0,236,30,1,0,
        0,0,237,238,5,98,0,0,238,239,5,114,0,0,239,240,5,101,0,0,240,241,
        5,97,0,0,241,242,5,107,0,0,242,32,1,0,0,0,243,244,5,114,0,0,244,
        245,5,97,0,0,245,246,5,110,0,0,246,247,5,103,0,0,247,248,5,101,0,
        0,248,34,1,0,0,0,249,250,5,110,0,0,250,251,5,105,0,0,251,252,5,108,
        0,0,252,36,1,0,0,0,253,254,5,116,0,0,254,255,5,114,0,0,255,256,5,
        117,0,0,256,257,5,101,0,0,257,38,1,0,0,0,258,259,5,102,0,0,259,260,
        5,97,0,0,260,261,5,108,0,0,261,262,5,115,0,0,262,263,5,101,0,0,263,
        40,1,0,0,0,264,265,5,43,0,0,265,42,1,0,0,0,266,267,5,45,0,0,267,
        44,1,0,0,0,268,269,5,42,0,0,269,46,1,0,0,0,270,271,5,47,0,0,271,
        48,1,0,0,0,272,273,5,37,0,0,273,50,1,0,0,0,274,275,5,61,0,0,275,
        276,5,61,0,0,276,52,1,0,0,0,277,278,5,33,0,0,278,279,5,61,0,0,279,
        54,1,0,0,0,280,281,5,60,0,0,281,56,1,0,0,0,282,283,5,60,0,0,283,
        284,5,61,0,0,284,58,1,0,0,0,285,286,5,62,0,0,286,60,1,0,0,0,287,
        288,5,62,0,0,288,289,5,61,0,0,289,62,1,0,0,0,290,291,5,38,0,0,291,
        292,5,38,0,0,292,64,1,0,0,0,293,294,5,124,0,0,294,295,5,124,0,0,
        295,66,1,0,0,0,296,297,5,33,0,0,297,68,1,0,0,0,298,299,5,61,0,0,
        299,70,1,0,0,0,300,301,5,43,0,0,301,302,5,61,0,0,302,72,1,0,0,0,
        303,304,5,45,0,0,304,305,5,61,0,0,305,74,1,0,0,0,306,307,5,42,0,
        0,307,308,5,61,0,0,308,76,1,0,0,0,309,310,5,47,0,0,310,311,5,61,
        0,0,311,78,1,0,0,0,312,313,5,37,0,0,313,314,5,61,0,0,314,80,1,0,
        0,0,315,316,5,46,0,0,316,82,1,0,0,0,317,318,5,58,0,0,318,84,1,0,
        0,0,319,320,5,40,0,0,320,86,1,0,0,0,321,322,5,41,0,0,322,88,1,0,
        0,0,323,324,5,123,0,0,324,90,1,0,0,0,325,326,5,125,0,0,326,92,1,
        0,0,0,327,328,5,91,0,0,328,94,1,0,0,0,329,330,5,93,0,0,330,96,1,
        0,0,0,331,332,5,44,0,0,332,98,1,0,0,0,333,334,5,59,0,0,334,100,1,
        0,0,0,335,339,7,0,0,0,336,338,7,1,0,0,337,336,1,0,0,0,338,341,1,
        0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,102,1,0,0,0,341,339,1,
        0,0,0,342,343,7,2,0,0,343,104,1,0,0,0,344,345,7,3,0,0,345,106,1,
        0,0,0,346,347,5,48,0,0,347,351,5,111,0,0,348,349,5,48,0,0,349,351,
        5,79,0,0,350,346,1,0,0,0,350,348,1,0,0,0,351,353,1,0,0,0,352,354,
        7,3,0,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,
        1,0,0,0,356,108,1,0,0,0,357,358,7,4,0,0,358,110,1,0,0,0,359,360,
        5,48,0,0,360,364,5,120,0,0,361,362,5,48,0,0,362,364,5,88,0,0,363,
        359,1,0,0,0,363,361,1,0,0,0,364,366,1,0,0,0,365,367,7,4,0,0,366,
        365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
        112,1,0,0,0,370,379,5,48,0,0,371,375,7,5,0,0,372,374,7,2,0,0,373,
        372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,
        379,1,0,0,0,377,375,1,0,0,0,378,370,1,0,0,0,378,371,1,0,0,0,379,
        114,1,0,0,0,380,384,5,46,0,0,381,383,7,2,0,0,382,381,1,0,0,0,383,
        386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,116,1,0,0,0,386,
        384,1,0,0,0,387,388,7,6,0,0,388,118,1,0,0,0,389,390,5,48,0,0,390,
        394,5,98,0,0,391,392,5,48,0,0,392,394,5,66,0,0,393,389,1,0,0,0,393,
        391,1,0,0,0,394,396,1,0,0,0,395,397,7,6,0,0,396,395,1,0,0,0,397,
        398,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,120,1,0,0,0,400,
        402,7,7,0,0,401,403,7,8,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,
        405,1,0,0,0,404,406,7,2,0,0,405,404,1,0,0,0,406,407,1,0,0,0,407,
        405,1,0,0,0,407,408,1,0,0,0,408,122,1,0,0,0,409,420,3,113,56,0,410,
        411,3,111,55,0,411,412,6,61,0,0,412,420,1,0,0,0,413,414,3,107,53,
        0,414,415,6,61,1,0,415,420,1,0,0,0,416,417,3,119,59,0,417,418,6,
        61,2,0,418,420,1,0,0,0,419,409,1,0,0,0,419,410,1,0,0,0,419,413,1,
        0,0,0,419,416,1,0,0,0,420,124,1,0,0,0,421,423,7,2,0,0,422,421,1,
        0,0,0,423,424,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,426,1,
        0,0,0,426,428,3,115,57,0,427,429,3,121,60,0,428,427,1,0,0,0,428,
        429,1,0,0,0,429,441,1,0,0,0,430,432,3,115,57,0,431,433,3,121,60,
        0,432,431,1,0,0,0,432,433,1,0,0,0,433,441,1,0,0,0,434,436,7,2,0,
        0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,
        0,438,439,1,0,0,0,439,441,3,121,60,0,440,422,1,0,0,0,440,430,1,0,
        0,0,440,435,1,0,0,0,441,126,1,0,0,0,442,443,7,9,0,0,443,128,1,0,
        0,0,444,448,8,10,0,0,445,446,5,92,0,0,446,448,3,127,63,0,447,444,
        1,0,0,0,447,445,1,0,0,0,448,130,1,0,0,0,449,453,5,34,0,0,450,452,
        3,129,64,0,451,450,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,
        1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,457,5,34,0,0,457,458,
        6,65,3,0,458,132,1,0,0,0,459,461,7,11,0,0,460,459,1,0,0,0,461,462,
        1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,
        6,66,4,0,465,134,1,0,0,0,466,468,5,13,0,0,467,466,1,0,0,0,467,468,
        1,0,0,0,468,469,1,0,0,0,469,470,5,10,0,0,470,471,1,0,0,0,471,472,
        6,67,4,0,472,136,1,0,0,0,473,474,5,47,0,0,474,475,5,47,0,0,475,479,
        1,0,0,0,476,478,8,12,0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,
        1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,483,
        6,68,4,0,483,138,1,0,0,0,484,485,5,47,0,0,485,486,5,42,0,0,486,491,
        1,0,0,0,487,490,3,139,69,0,488,490,9,0,0,0,489,487,1,0,0,0,489,488,
        1,0,0,0,490,493,1,0,0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,
        1,0,0,0,493,491,1,0,0,0,494,495,5,42,0,0,495,496,5,47,0,0,496,497,
        1,0,0,0,497,498,6,69,4,0,498,140,1,0,0,0,499,503,5,34,0,0,500,502,
        3,129,64,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,
        1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,506,508,7,13,0,0,507,506,
        1,0,0,0,508,509,1,0,0,0,509,510,6,70,5,0,510,142,1,0,0,0,511,515,
        5,34,0,0,512,514,3,129,64,0,513,512,1,0,0,0,514,517,1,0,0,0,515,
        513,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,
        519,5,92,0,0,519,523,8,9,0,0,520,522,3,129,64,0,521,520,1,0,0,0,
        522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,
        525,523,1,0,0,0,526,527,6,71,6,0,527,144,1,0,0,0,528,529,9,0,0,0,
        529,530,6,72,7,0,530,146,1,0,0,0,30,0,339,350,355,363,368,375,378,
        384,393,398,402,407,419,424,428,432,437,440,447,453,462,467,479,
        489,491,503,507,515,523,8,1,61,0,1,61,1,1,61,2,1,65,3,6,0,0,1,70,
        4,1,71,5,1,72,6
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQUAL = 26
    NOT_EQUAL = 27
    LESS = 28
    LESS_OR_EQUAL = 29
    GREATER = 30
    GREATER_OR_EQUAL = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ADD_ASSIGN = 36
    SUB_ASSIGN = 37
    MUL_ASSIGN = 38
    DIV_ASSIGN = 39
    MOD_ASSIGN = 40
    DOT = 41
    COLON = 42
    LP = 43
    RP = 44
    LB = 45
    RB = 46
    LSB = 47
    RSB = 48
    COMMA = 49
    SEMI = 50
    ID = 51
    INT_LIT = 52
    FLOAT_LIT = 53
    STRING_LIT = 54
    WS = 55
    NEWLINE = 56
    LINE_COMMENT = 57
    BLOCK_COMMENT = 58
    UNCLOSE_STRING = 59
    ILLEGAL_ESCAPE = 60
    ERROR_CHAR = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "':'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "COLON", "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", 
            "SEMI", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "NEWLINE", 
            "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", 
                  "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", "SEMI", 
                  "ID", "DIGIT", "OCTAL_DIGIT", "OCTAL", "HEX_DIGIT", "HEX", 
                  "DECIMAL", "DECIMAL_PART", "BINARY_DIGIT", "BINARY", "EXPONENT", 
                  "INT_LIT", "FLOAT_LIT", "ESC_CHAR", "STR_CHAR", "STRING_LIT", 
                  "WS", "NEWLINE", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.INT_LIT_action 
            actions[65] = self.STRING_LIT_action 
            actions[70] = self.UNCLOSE_STRING_action 
            actions[71] = self.ILLEGAL_ESCAPE_action 
            actions[72] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = str(int(self.text,16))
     

        if actionIndex == 1:
            self.text = str(int(self.text,8))
     

        if actionIndex == 2:
            self.text = str(int(self.text,2))
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             self.text = self.text[1:-1] 
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                    if self.text[-1] in ['\r','\n']: #nếu kết thúc bằng dấu xuống dòng thì cắt dấu xuống dòng
                        self.text = self.text[1:-1]
                    else: #nếu kết thúc bằng EOF thì lấy từ đầu chuỗi đến hết
                        self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
              #nếu có kí tự escape không hợp lệ (không phải \b, \r, \n, \t, \', \", \\)
                illegal_str = str(self.text)
                i = illegal_str.find('\\') #tìm vị trí xuất hiện đầu tiên của kí tự escape
                while i != -1 and illegal_str[i+1] in 'brnt\'"\\': #hợp lệ thì tìm tiếp
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            raise ErrorToken(self.text)
     



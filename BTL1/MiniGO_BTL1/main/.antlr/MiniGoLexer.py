# Generated from d:/Projects/PPL-Assignment/BTL1/MiniGO_BTL1/main/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,60,502,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,
        29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,
        34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,
        39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
        45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,5,50,337,
        8,50,10,50,12,50,340,9,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
        1,54,5,54,351,8,54,10,54,12,54,354,9,54,3,54,356,8,54,1,55,1,55,
        4,55,360,8,55,11,55,12,55,361,1,56,1,56,1,56,1,56,3,56,368,8,56,
        1,56,4,56,371,8,56,11,56,12,56,372,1,57,1,57,3,57,377,8,57,1,57,
        4,57,380,8,57,11,57,12,57,381,1,58,1,58,5,58,386,8,58,10,58,12,58,
        389,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,398,8,59,1,60,4,
        60,401,8,60,11,60,12,60,402,1,60,1,60,3,60,407,8,60,1,60,1,60,3,
        60,411,8,60,1,60,4,60,414,8,60,11,60,12,60,415,1,60,3,60,419,8,60,
        1,61,1,61,1,62,1,62,1,62,3,62,426,8,62,1,63,1,63,5,63,430,8,63,10,
        63,12,63,433,9,63,1,63,1,63,1,63,1,64,4,64,439,8,64,11,64,12,64,
        440,1,64,1,64,1,65,1,65,1,65,1,65,5,65,449,8,65,10,65,12,65,452,
        9,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,461,8,66,10,66,12,66,
        464,9,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,5,67,473,8,67,10,67,
        12,67,476,9,67,1,67,3,67,479,8,67,1,67,1,67,1,68,1,68,5,68,485,8,
        68,10,68,12,68,488,9,68,1,68,1,68,1,68,5,68,493,8,68,10,68,12,68,
        496,9,68,1,68,1,68,1,69,1,69,1,69,1,462,0,70,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
        50,101,51,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,52,
        121,53,123,0,125,0,127,54,129,55,131,56,133,57,135,58,137,59,139,
        60,1,0,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,
        0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,49,57,2,0,69,69,101,
        101,2,0,43,43,45,45,7,0,34,34,39,39,92,92,98,98,110,110,114,114,
        116,116,4,0,10,10,13,13,34,34,92,92,3,0,9,10,12,13,32,32,2,0,10,
        10,13,13,2,1,10,10,13,13,517,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
        0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,
        1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,148,1,0,0,0,
        5,151,1,0,0,0,7,156,1,0,0,0,9,160,1,0,0,0,11,167,1,0,0,0,13,172,
        1,0,0,0,15,177,1,0,0,0,17,184,1,0,0,0,19,194,1,0,0,0,21,201,1,0,
        0,0,23,205,1,0,0,0,25,211,1,0,0,0,27,219,1,0,0,0,29,225,1,0,0,0,
        31,229,1,0,0,0,33,238,1,0,0,0,35,244,1,0,0,0,37,250,1,0,0,0,39,254,
        1,0,0,0,41,259,1,0,0,0,43,265,1,0,0,0,45,267,1,0,0,0,47,269,1,0,
        0,0,49,271,1,0,0,0,51,273,1,0,0,0,53,275,1,0,0,0,55,278,1,0,0,0,
        57,281,1,0,0,0,59,283,1,0,0,0,61,286,1,0,0,0,63,288,1,0,0,0,65,291,
        1,0,0,0,67,294,1,0,0,0,69,297,1,0,0,0,71,299,1,0,0,0,73,301,1,0,
        0,0,75,304,1,0,0,0,77,307,1,0,0,0,79,310,1,0,0,0,81,313,1,0,0,0,
        83,316,1,0,0,0,85,318,1,0,0,0,87,320,1,0,0,0,89,322,1,0,0,0,91,324,
        1,0,0,0,93,326,1,0,0,0,95,328,1,0,0,0,97,330,1,0,0,0,99,332,1,0,
        0,0,101,334,1,0,0,0,103,341,1,0,0,0,105,343,1,0,0,0,107,345,1,0,
        0,0,109,355,1,0,0,0,111,357,1,0,0,0,113,367,1,0,0,0,115,374,1,0,
        0,0,117,383,1,0,0,0,119,397,1,0,0,0,121,418,1,0,0,0,123,420,1,0,
        0,0,125,425,1,0,0,0,127,427,1,0,0,0,129,438,1,0,0,0,131,444,1,0,
        0,0,133,455,1,0,0,0,135,470,1,0,0,0,137,482,1,0,0,0,139,499,1,0,
        0,0,141,142,5,118,0,0,142,143,5,111,0,0,143,144,5,116,0,0,144,145,
        5,105,0,0,145,146,5,101,0,0,146,147,5,110,0,0,147,2,1,0,0,0,148,
        149,5,105,0,0,149,150,5,102,0,0,150,4,1,0,0,0,151,152,5,101,0,0,
        152,153,5,108,0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,6,1,0,
        0,0,156,157,5,102,0,0,157,158,5,111,0,0,158,159,5,114,0,0,159,8,
        1,0,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,5,116,0,0,163,
        164,5,117,0,0,164,165,5,114,0,0,165,166,5,110,0,0,166,10,1,0,0,0,
        167,168,5,102,0,0,168,169,5,117,0,0,169,170,5,110,0,0,170,171,5,
        99,0,0,171,12,1,0,0,0,172,173,5,116,0,0,173,174,5,121,0,0,174,175,
        5,112,0,0,175,176,5,101,0,0,176,14,1,0,0,0,177,178,5,115,0,0,178,
        179,5,116,0,0,179,180,5,114,0,0,180,181,5,117,0,0,181,182,5,99,0,
        0,182,183,5,116,0,0,183,16,1,0,0,0,184,185,5,105,0,0,185,186,5,110,
        0,0,186,187,5,116,0,0,187,188,5,101,0,0,188,189,5,114,0,0,189,190,
        5,102,0,0,190,191,5,97,0,0,191,192,5,99,0,0,192,193,5,101,0,0,193,
        18,1,0,0,0,194,195,5,115,0,0,195,196,5,116,0,0,196,197,5,114,0,0,
        197,198,5,105,0,0,198,199,5,110,0,0,199,200,5,103,0,0,200,20,1,0,
        0,0,201,202,5,105,0,0,202,203,5,110,0,0,203,204,5,116,0,0,204,22,
        1,0,0,0,205,206,5,102,0,0,206,207,5,108,0,0,207,208,5,111,0,0,208,
        209,5,97,0,0,209,210,5,116,0,0,210,24,1,0,0,0,211,212,5,98,0,0,212,
        213,5,111,0,0,213,214,5,111,0,0,214,215,5,108,0,0,215,216,5,101,
        0,0,216,217,5,97,0,0,217,218,5,110,0,0,218,26,1,0,0,0,219,220,5,
        99,0,0,220,221,5,111,0,0,221,222,5,110,0,0,222,223,5,115,0,0,223,
        224,5,116,0,0,224,28,1,0,0,0,225,226,5,118,0,0,226,227,5,97,0,0,
        227,228,5,114,0,0,228,30,1,0,0,0,229,230,5,99,0,0,230,231,5,111,
        0,0,231,232,5,110,0,0,232,233,5,116,0,0,233,234,5,105,0,0,234,235,
        5,110,0,0,235,236,5,117,0,0,236,237,5,101,0,0,237,32,1,0,0,0,238,
        239,5,98,0,0,239,240,5,114,0,0,240,241,5,101,0,0,241,242,5,97,0,
        0,242,243,5,107,0,0,243,34,1,0,0,0,244,245,5,114,0,0,245,246,5,97,
        0,0,246,247,5,110,0,0,247,248,5,103,0,0,248,249,5,101,0,0,249,36,
        1,0,0,0,250,251,5,110,0,0,251,252,5,105,0,0,252,253,5,108,0,0,253,
        38,1,0,0,0,254,255,5,116,0,0,255,256,5,114,0,0,256,257,5,117,0,0,
        257,258,5,101,0,0,258,40,1,0,0,0,259,260,5,102,0,0,260,261,5,97,
        0,0,261,262,5,108,0,0,262,263,5,115,0,0,263,264,5,101,0,0,264,42,
        1,0,0,0,265,266,5,43,0,0,266,44,1,0,0,0,267,268,5,45,0,0,268,46,
        1,0,0,0,269,270,5,42,0,0,270,48,1,0,0,0,271,272,5,47,0,0,272,50,
        1,0,0,0,273,274,5,37,0,0,274,52,1,0,0,0,275,276,5,61,0,0,276,277,
        5,61,0,0,277,54,1,0,0,0,278,279,5,33,0,0,279,280,5,61,0,0,280,56,
        1,0,0,0,281,282,5,60,0,0,282,58,1,0,0,0,283,284,5,60,0,0,284,285,
        5,61,0,0,285,60,1,0,0,0,286,287,5,62,0,0,287,62,1,0,0,0,288,289,
        5,62,0,0,289,290,5,61,0,0,290,64,1,0,0,0,291,292,5,38,0,0,292,293,
        5,38,0,0,293,66,1,0,0,0,294,295,5,124,0,0,295,296,5,124,0,0,296,
        68,1,0,0,0,297,298,5,33,0,0,298,70,1,0,0,0,299,300,5,61,0,0,300,
        72,1,0,0,0,301,302,5,43,0,0,302,303,5,61,0,0,303,74,1,0,0,0,304,
        305,5,45,0,0,305,306,5,61,0,0,306,76,1,0,0,0,307,308,5,42,0,0,308,
        309,5,61,0,0,309,78,1,0,0,0,310,311,5,47,0,0,311,312,5,61,0,0,312,
        80,1,0,0,0,313,314,5,37,0,0,314,315,5,61,0,0,315,82,1,0,0,0,316,
        317,5,46,0,0,317,84,1,0,0,0,318,319,5,40,0,0,319,86,1,0,0,0,320,
        321,5,41,0,0,321,88,1,0,0,0,322,323,5,123,0,0,323,90,1,0,0,0,324,
        325,5,125,0,0,325,92,1,0,0,0,326,327,5,91,0,0,327,94,1,0,0,0,328,
        329,5,93,0,0,329,96,1,0,0,0,330,331,5,44,0,0,331,98,1,0,0,0,332,
        333,5,59,0,0,333,100,1,0,0,0,334,338,7,0,0,0,335,337,7,1,0,0,336,
        335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
        102,1,0,0,0,340,338,1,0,0,0,341,342,7,2,0,0,342,104,1,0,0,0,343,
        344,7,3,0,0,344,106,1,0,0,0,345,346,7,4,0,0,346,108,1,0,0,0,347,
        356,5,48,0,0,348,352,7,5,0,0,349,351,7,2,0,0,350,349,1,0,0,0,351,
        354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,356,1,0,0,0,354,
        352,1,0,0,0,355,347,1,0,0,0,355,348,1,0,0,0,356,110,1,0,0,0,357,
        359,5,48,0,0,358,360,7,3,0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,
        359,1,0,0,0,361,362,1,0,0,0,362,112,1,0,0,0,363,364,5,48,0,0,364,
        368,5,120,0,0,365,366,5,48,0,0,366,368,5,88,0,0,367,363,1,0,0,0,
        367,365,1,0,0,0,368,370,1,0,0,0,369,371,7,4,0,0,370,369,1,0,0,0,
        371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,114,1,0,0,0,
        374,376,7,6,0,0,375,377,7,7,0,0,376,375,1,0,0,0,376,377,1,0,0,0,
        377,379,1,0,0,0,378,380,7,2,0,0,379,378,1,0,0,0,380,381,1,0,0,0,
        381,379,1,0,0,0,381,382,1,0,0,0,382,116,1,0,0,0,383,387,5,46,0,0,
        384,386,7,2,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,
        387,388,1,0,0,0,388,118,1,0,0,0,389,387,1,0,0,0,390,398,3,109,54,
        0,391,392,3,113,56,0,392,393,6,59,0,0,393,398,1,0,0,0,394,395,3,
        111,55,0,395,396,6,59,1,0,396,398,1,0,0,0,397,390,1,0,0,0,397,391,
        1,0,0,0,397,394,1,0,0,0,398,120,1,0,0,0,399,401,7,2,0,0,400,399,
        1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,404,
        1,0,0,0,404,406,3,117,58,0,405,407,3,115,57,0,406,405,1,0,0,0,406,
        407,1,0,0,0,407,419,1,0,0,0,408,410,3,117,58,0,409,411,3,115,57,
        0,410,409,1,0,0,0,410,411,1,0,0,0,411,419,1,0,0,0,412,414,7,2,0,
        0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,
        0,416,417,1,0,0,0,417,419,3,115,57,0,418,400,1,0,0,0,418,408,1,0,
        0,0,418,413,1,0,0,0,419,122,1,0,0,0,420,421,7,8,0,0,421,124,1,0,
        0,0,422,426,8,9,0,0,423,424,5,92,0,0,424,426,3,123,61,0,425,422,
        1,0,0,0,425,423,1,0,0,0,426,126,1,0,0,0,427,431,5,34,0,0,428,430,
        3,125,62,0,429,428,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,
        1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,435,5,34,0,0,435,436,
        6,63,2,0,436,128,1,0,0,0,437,439,7,10,0,0,438,437,1,0,0,0,439,440,
        1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,
        6,64,3,0,443,130,1,0,0,0,444,445,5,47,0,0,445,446,5,47,0,0,446,450,
        1,0,0,0,447,449,8,11,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,
        1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,
        6,65,3,0,454,132,1,0,0,0,455,456,5,47,0,0,456,457,5,42,0,0,457,462,
        1,0,0,0,458,461,3,133,66,0,459,461,9,0,0,0,460,458,1,0,0,0,460,459,
        1,0,0,0,461,464,1,0,0,0,462,463,1,0,0,0,462,460,1,0,0,0,463,465,
        1,0,0,0,464,462,1,0,0,0,465,466,5,42,0,0,466,467,5,47,0,0,467,468,
        1,0,0,0,468,469,6,66,3,0,469,134,1,0,0,0,470,474,5,34,0,0,471,473,
        3,125,62,0,472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,
        1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,477,479,7,12,0,0,478,477,
        1,0,0,0,479,480,1,0,0,0,480,481,6,67,4,0,481,136,1,0,0,0,482,486,
        5,34,0,0,483,485,3,125,62,0,484,483,1,0,0,0,485,488,1,0,0,0,486,
        484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,0,0,489,
        490,5,92,0,0,490,494,8,8,0,0,491,493,3,125,62,0,492,491,1,0,0,0,
        493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,
        496,494,1,0,0,0,497,498,6,68,5,0,498,138,1,0,0,0,499,500,9,0,0,0,
        500,501,6,69,6,0,501,140,1,0,0,0,26,0,338,352,355,361,367,372,376,
        381,387,397,402,406,410,415,418,425,431,440,450,460,462,474,478,
        486,494,7,1,59,0,1,59,1,1,63,2,6,0,0,1,67,3,1,68,4,1,69,5
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    CONST = 14
    VAR = 15
    CONTINUE = 16
    BREAK = 17
    RANGE = 18
    NIL = 19
    TRUE = 20
    FALSE = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_OR_EQUAL = 30
    GREATER = 31
    GREATER_OR_EQUAL = 32
    AND = 33
    OR = 34
    NOT = 35
    ASSIGN = 36
    ADD_ASSIGN = 37
    SUB_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    LP = 43
    RP = 44
    LB = 45
    RB = 46
    LSB = 47
    RSB = 48
    COMMA = 49
    SEMI = 50
    ID = 51
    INT_LIT = 52
    FLOAT_LIT = 53
    STRING_LIT = 54
    WS = 55
    LINE_COMMENT = 56
    BLOCK_COMMENT = 57
    UNCLOSE_STRING = 58
    ILLEGAL_ESCAPE = 59
    ERROR_CHAR = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'votien'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_OR_EQUAL", 
            "GREATER", "GREATER_OR_EQUAL", "AND", "OR", "NOT", "ASSIGN", 
            "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
            "DOT", "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", "SEMI", 
            "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "LINE_COMMENT", 
            "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "LESS_OR_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "LP", 
                  "RP", "LB", "RB", "LSB", "RSB", "COMMA", "SEMI", "ID", 
                  "DIGIT", "OCTAL_DIGIT", "HEX_DIGIT", "DECIMAL", "OCTAL", 
                  "HEX", "EXPONENT", "DECIMAL_PART", "INT_LIT", "FLOAT_LIT", 
                  "ESC_CHAR", "STR_CHAR", "STRING_LIT", "WS", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:
            result = super().emit();
            raise UncloseString(result.text[1:]);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text[1:]);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text);
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[59] = self.INT_LIT_action 
            actions[63] = self.STRING_LIT_action 
            actions[67] = self.UNCLOSE_STRING_action 
            actions[68] = self.ILLEGAL_ESCAPE_action 
            actions[69] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = str(int(self.text,16))
     

        if actionIndex == 1:
            self.text = str(int(self.text,8))
     

    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                self.text = self.text[1:-1]

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                if self.text[-1] in ['\r','\n']:
                    self.text = self.text[1:-1]
                else:
                    self.text = self.text[1:]
                raise UncloseString(self.text)

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                illegal_str = str(self.text)
                i = illegal_str.find('\\')
                while i != -1 and illegal_str[i+1] in 'brnt\'"\\':
                    i = illegal_str.find('\\', i+2)
                raise IllegalEscape(illegal_str[1:i+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise ErrorToken(self.text)
     


